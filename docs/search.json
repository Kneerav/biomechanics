[{"path":"/articles/marker-processing.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Processing 3D marker data","text":"Processing marker data involves following steps: Rotating data positive x, y, z axis point towards forward, , right, respectively Filtering data (usually cut-6-20Hz) Computing virtual markers Writing marker data .trc file Noting filtering data really necessary static trial (participant moving), virtual markers necessary cases (particularly dynamic trials). following example, assume extracted clipped data (rotations applied yet).","code":""},{"path":"/articles/marker-processing.html","id":"reading-data","dir":"Articles","previous_headings":"","what":"Reading data","title":"Processing 3D marker data","text":"First, read .trc file.","code":"library(dplyr) #> Warning: package 'dplyr' was built under R version 4.2.3 #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  #read in trc file, assuming that this is raw and not rotated df = read_trc(\"./data/static_z_up.trc\")"},{"path":"/articles/marker-processing.html","id":"visualise","dir":"Articles","previous_headings":"","what":"Visualise","title":"Processing 3D marker data","text":"can create 3D visual specified frame. , can see orientation data appears incorrect. motion capture systems typically “Z-” coordinate system, OpenSim expects “Y-”.","code":"#quick visual to check visualise_3D_marker_position(df, selected_frame = 1) #> Loading required package: plotly #> Loading required package: ggplot2 #>  #> Attaching package: 'plotly' #> The following object is masked from 'package:ggplot2': #>  #>     last_plot #> The following object is masked from 'package:stats': #>  #>     filter #> The following object is masked from 'package:graphics': #>  #>     layout"},{"path":"/articles/marker-processing.html","id":"rotate","dir":"Articles","previous_headings":"","what":"Rotate","title":"Processing 3D marker data","text":"can rotate data using rotate_markers() function. rotate_markers() function takes data.frame marker trajectories (read_trc()) rotates around specified axes specified amount. intuition around rotation, first recognise clockwise rotation around axis pointing negative. Therefore, rotating data positive y-axis = forward (.e., Vicon system) positive x-axis = forward (.e., OpenSim system) achieved multiple ways, one two anti-clockwise rotations 90 degrees, z- x-axis.","code":"#now rotate to OpenSim coordinate system (if needed) df_rotated =       #raw data   df %>%       #rotate anti-clockwise around z axis   rotate_markers(., angle_deg = 90, axis = \"z\") %>%       #rotate anti-clockwise around x axis   rotate_markers(., angle_deg = 90, axis = \"x\")  #visualise to check correct rotation visualise_3D_marker_position(df_rotated, selected_frame = 1)"},{"path":"/articles/marker-processing.html","id":"filter","dir":"Articles","previous_headings":"","what":"Filter","title":"Processing 3D marker data","text":"often filter marker data smooth . won’t make big difference case static trial, function (filter_lowpass_pad_df()) can used .trc data. Note functions also pads signal specified amount either side prior filtering, removes padding . helps remove artefact entering data. Choosing appropriate filter another discussion, context, low-pass Butterworth filter cut-6-15Hz fairly typical.","code":"#now lets add filtering (won't change much since this is static) df_filtered =       #get the rotated data   df_rotated %>%       #filter with zero-lag 4th order Butterworth filter (cutoff = 6Hz)   filter_lowpass_pad_df(.,                          time_col = \"Time\",                         exclude_cols = c(1, 2), #don't filter the Frame and Time data                                 cut_off = 6, #in Hz                                sample_rate = 200, #in Hz                                order = 2, #zero-lag filter, so the order doubles to 4                                pad_time = 0.5) #pad data by 500ms either side to avoid artefacts"},{"path":"/articles/marker-processing.html","id":"joint-centres","dir":"Articles","previous_headings":"","what":"Joint centres","title":"Processing 3D marker data","text":"static trials, often want compute joint centres. following demonstrates compute hip joint centre using regression equations (either “harrington” “bell” can specified), mid-point method knee ankle. step needed trial types, important static trials use scaling models.","code":"#finally, let's compute joint centres df_processed =       #get the filtered data   df_filtered %>%       #compute hip joint centres   compute_hjc_regression(.,                          LASIS_name = \"L.ASIS\",                          RASIS_name = \"R.ASIS\",                          LPSIS_name = \"L.PSIS\",                          RPSIS_name = \"R.PSIS\",                          RHJC_name = \"R.HJC\",                          LHJC_name = \"L.HJC\",                          method = \"harrington\") %>%  #most accurate regression method      #compute knee joint centres   compute_jc_mid(.,                   marker_name_1 = \"L.Knee.Med\",                   marker_name_2 = \"L.Knee.Lat\",                   jc_name = \"L.Knee\") %>%    compute_jc_mid(.,                   marker_name_1 = \"R.Knee.Med\",                   marker_name_2 = \"R.Knee.Lat\",                   jc_name = \"R.Knee\") %>%       #compute ankle joint centres   compute_jc_mid(.,                   marker_name_1 = \"L.Ankle.Med\",                   marker_name_2 = \"L.Ankle.Lat\",                   jc_name = \"L.Ankle\") %>%    compute_jc_mid(.,                   marker_name_1 = \"R.Ankle.Med\",                   marker_name_2 = \"R.Ankle.Lat\",                   jc_name = \"R.Ankle\")  #> Loading required package: pracma #>  #> Attaching package: 'pracma' #> The following objects are masked from 'package:magrittr': #>  #>     and, mod, or  #re-visualise, which should show the new joint centre markers visualise_3D_marker_position(df_processed, selected_frame = 1)"},{"path":"/articles/marker-processing.html","id":"write","dir":"Articles","previous_headings":"","what":"Write","title":"Processing 3D marker data","text":"Finally, can write processed marker data file subsequent analysis.","code":"#then write to file write_trc(df_processed, unit = \"mm\", \"./data/static_processed.trc\")"},{"path":"/articles/setting-up.html","id":"installing","dir":"Articles","previous_headings":"","what":"Installing","title":"Setting up for biomechanical analysis","text":"","code":"#install the remotes package if you don't akready have it install.packages(\"remotes\")  #install the package remotes::install_github(\"Kneerav/biomechanics\")"},{"path":"/articles/setting-up.html","id":"basic-setup","dir":"Articles","previous_headings":"","what":"Basic setup","title":"Setting up for biomechanical analysis","text":"get going basic setup, can just load library. Please note full functionality, also want OpenSim api set .","code":"library(biomechanics)"},{"path":"/articles/setting-up.html","id":"opensim-api","dir":"Articles","previous_headings":"","what":"OpenSim api","title":"Setting up for biomechanical analysis","text":"functions depend OpenSim api (https://simtk.org/projects/opensim). set , first need set Python environment. Download install either Anaconda Miniconda : https://www.anaconda.com/download. prefer Miniconda, “lighter” version takes far less disk space full Anaoconda version (also include common packages). Next, create new environment OpenSim conda package installed. best use informative names, “opensim_scripting_45_311” indicating OpenSim v4.5 python version 3.11. Alternatively (preferred), can create environment opening anaconda navigator create new environment called “opensim_scripting_45_311” python version 3.11. method preferred found , order OpenSim package install work, need downgrade OpenSSL package 1.1.1w (easily achieved anaconda navigator). Open conda prompt, enter code activate new environment, install opensim package (latest version, indicated : https://anaconda.org/opensim-org/opensim). switch python interpreter test installation, typing . errors, ready roll. , might well install additional python packages might need follows. Next, open R Studio ensure reticulate package setup work new environment. easiest way found follows:","code":"conda create -n \"opensim_scripting_45_311\" python=3.11 conda activate opensim_scripting_45_311 conda install opensim-org::opensim python import opensim as osim python import opensim as osim exit() #to leave the python interpretor conda install -c conda-forge btk #btk has numerous tools for working with c3d files pip install scipy #for signal processing  pip install pandas #for data management pip install spm1d #statistical parametric mapping library(reticulate) #you should have installed this package already Sys.setenv(RETICULATE_PYTHON = \"C:/Users/nimaniar/.conda/envs/opensim_scripting_45_311\") #change file path as needed py_discover_config() #check to see if reading correct version of python, should be 3.11 osim = import(\"opensim\")"},{"path":"/articles/setting-up.html","id":"other-r-packages","dir":"Articles","previous_headings":"","what":"Other r packages","title":"Setting up for biomechanical analysis","text":"plenty R packages worth installing. basics: Note pracma signal already dependencies biomechanics package.","code":"install.packages(   c(\"tidyverse\", #you probably know why     \"readxl\" #read excel files     \"pracma\", #maths stuff     \"signal\", #for signal processing     \"caroline\", #some useful utility functions     \"fda\", #functional data analysis     )   )"},{"path":"/articles/setting-up.html","id":"other-recommended-installs","dir":"Articles","previous_headings":"","what":"Other recommended installs","title":"Setting up for biomechanical analysis","text":"’d also recommend following installs make life easier: OpenSim GUI - Graphical user interface OpenSim (musculoskeletal modelling software) https://simtk.org/projects/opensim Notepad ++ - text editor useful opening .xml files https://notepad-plus-plus.org/ Mokka - Motion capture data visualiser https://biomechanical-toolkit.github.io/mokka/","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dr Nirav Maniar. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Maniar DN (2025). biomechanics: Biomechanics Data Analysis. R package version 0.1.0, https://github.com/Kneerav/biomechanics.","code":"@Manual{,   title = {biomechanics: Biomechanics Data Analysis},   author = {Dr Nirav Maniar},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/Kneerav/biomechanics}, }"},{"path":"/index.html","id":"install","dir":"","previous_headings":"","what":"Biomechanics Data Analysis","title":"Biomechanics Data Analysis","text":"install, use following: installed, can load library use various functions.","code":"#install the remotes package if you don't akready have it install.packages(\"remotes\")  #install the package remotes::install_github(\"Kneerav/biomechanics\") library(biomechanics)"},{"path":"/index.html","id":"full-setup","dir":"","previous_headings":"","what":"Full setup","title":"Biomechanics Data Analysis","text":"functions use OpenSim api, therefore require installation reticulate package, opensim conda package appropriate environment. Please see vignettes information .","code":""},{"path":"/reference/analyse_angular_momentum_com.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse Angular Momentum for a Model — analyse_angular_momentum_com","title":"Analyse Angular Momentum for a Model — analyse_angular_momentum_com","text":"function computes segmental angular momentum centre mass body model based position velocity kinematics time, returning results saving file.","code":""},{"path":"/reference/analyse_angular_momentum_com.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyse Angular Momentum for a Model — analyse_angular_momentum_com","text":"","code":"analyse_angular_momentum_com(   model_file = \"Model_SCALED.osim\",   body_pos_file = \"Model_scaled_BodyKinematics_pos_global.sto\",   body_vel_file = \"Model_scaled_BodyKinematics_vel_global.sto\",   file_out = \"angular_momentum.sto\",   in_degrees = TRUE,   write_file = TRUE,   return_object = FALSE )"},{"path":"/reference/analyse_angular_momentum_com.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyse Angular Momentum for a Model — analyse_angular_momentum_com","text":"model_file string specifying model file (.osim format). body_pos_file string specifying body position file (.sto format). body_vel_file string specifying body velocity file (.sto format). file_out string specifying output file angular momentum results. in_degrees Logical; TRUE, input angles velocities assumed degrees. Defaults TRUE. write_file Logical; TRUE, function writes results file. Defaults TRUE. return_object Logical; TRUE, function returns computed angular momentum data frame.","code":""},{"path":"/reference/analyse_angular_momentum_com.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyse Angular Momentum for a Model — analyse_angular_momentum_com","text":"return_object = TRUE, data frame containing angular momentum values body time step.","code":""},{"path":"/reference/analyse_joint_power.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse joint power — analyse_joint_power","title":"Analyse joint power — analyse_joint_power","text":"function computes joint power using inverse dynamics joint velocities OpenSim.  function option sum components given joint limb (e.g., hip, knee) create new  column joint (e.g., hip_r, hip_l).. default, summing excludes columns contain  word \"beta\" (.e., couple patellofemoral joint).","code":""},{"path":"/reference/analyse_joint_power.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyse joint power — analyse_joint_power","text":"","code":"analyse_joint_power(   inverse_dynamics_file = \"inverse_dynamics.sto\",   joint_vel_file = \"Model_scaled_Kinematics_u.sto\",   file_out = \"joint_power.sto\",   in_degrees = TRUE,   sum_joints = c(\"hip\", \"arm\"),   sum_suffix = c(\"_l\", \"_r\"),   write_file = TRUE,   return_object = FALSE )"},{"path":"/reference/analyse_joint_power.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyse joint power — analyse_joint_power","text":"inverse_dynamics_file string specifying file path inverse dynamics data (e.g., \"inverse_dynamics.sto\"). joint_vel_file string specifying file path joint velocities (e.g., \"Model_scaled_Kinematics_u.sto\"). file_out string specifying output file path joint power results (e.g., \"joint_power.sto\"). in_degrees logical indicating whether input joint velocities degrees (default TRUE). TRUE, velocities converted radians. sum_joints character vector joints sum (e.g., c(\"hip\", \"arm\")). Default c(\"hip\", \"arm\"). sum_suffix character vector suffixes left right sides (e.g., c(\"_l\", \"_r\")). Default c(\"_l\", \"_r\"). write_file logical indicating whether write results file (default TRUE). return_object logical indicating whether return resulting data frame (default FALSE).","code":""},{"path":"/reference/analyse_joint_power.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyse joint power — analyse_joint_power","text":"return_object = TRUE, returns data frame computed joint power. write_file = TRUE, writes data file.","code":""},{"path":"/reference/compute_cutoff_correction.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Corrected Cutoff Frequency for Filter — compute_cutoff_correction","title":"Compute Corrected Cutoff Frequency for Filter — compute_cutoff_correction","text":"function computes corrected cutoff frequency lowpass highpass filter using correction factor David . Winter. highpass filters, Robertson's high-pass modification applied.","code":""},{"path":"/reference/compute_cutoff_correction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Corrected Cutoff Frequency for Filter — compute_cutoff_correction","text":"","code":"compute_cutoff_correction(   filter_passes = 2,   cutoff_frequency = 20,   sampling_frequency = 200,   type = \"lowpass\" )"},{"path":"/reference/compute_cutoff_correction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Corrected Cutoff Frequency for Filter — compute_cutoff_correction","text":"filter_passes Integer. number passes filter. Default 2. cutoff_frequency Numeric. cutoff frequency Hz. Default 6 lowpass. sampling_frequency Numeric. sampling frequency Hz. Default 200. type Character. type filter. Must either \"lowpass\" \"highpass\". Default \"lowpass\".","code":""},{"path":"/reference/compute_cutoff_correction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Corrected Cutoff Frequency for Filter — compute_cutoff_correction","text":"Numeric. corrected cutoff frequency Hz.","code":""},{"path":"/reference/compute_cutoff_correction_highpass.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Corrected Cutoff Frequency for Highpass Filter — compute_cutoff_correction_highpass","title":"Compute Corrected Cutoff Frequency for Highpass Filter — compute_cutoff_correction_highpass","text":"function computes corrected cutoff frequency highpass filter using correction factor David . Winter Robertson's high-pass modification.","code":""},{"path":"/reference/compute_cutoff_correction_highpass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Corrected Cutoff Frequency for Highpass Filter — compute_cutoff_correction_highpass","text":"","code":"compute_cutoff_correction_highpass(   filter_passes = 2,   cutoff_frequency = 20,   sampling_frequency = 200 )"},{"path":"/reference/compute_cutoff_correction_highpass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Corrected Cutoff Frequency for Highpass Filter — compute_cutoff_correction_highpass","text":"filter_passes Integer. number passes filter. Default 2. cutoff_frequency Numeric. cutoff frequency Hz. Default 20. sampling_frequency Numeric. sampling frequency Hz. Default 200.","code":""},{"path":"/reference/compute_cutoff_correction_highpass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Corrected Cutoff Frequency for Highpass Filter — compute_cutoff_correction_highpass","text":"Numeric. corrected cutoff frequency Hz.","code":""},{"path":"/reference/compute_cutoff_correction_lowpass.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Corrected Cutoff Frequency for Lowpass Filter — compute_cutoff_correction_lowpass","title":"Compute Corrected Cutoff Frequency for Lowpass Filter — compute_cutoff_correction_lowpass","text":"function computes corrected cutoff frequency lowpass filter using correction factor David . Winter.","code":""},{"path":"/reference/compute_cutoff_correction_lowpass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Corrected Cutoff Frequency for Lowpass Filter — compute_cutoff_correction_lowpass","text":"","code":"compute_cutoff_correction_lowpass(   filter_passes = 2,   cutoff_frequency = 6,   sampling_frequency = 200 )"},{"path":"/reference/compute_cutoff_correction_lowpass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Corrected Cutoff Frequency for Lowpass Filter — compute_cutoff_correction_lowpass","text":"filter_passes Integer. number passes filter. Default 2. cutoff_frequency Numeric. cutoff frequency Hz. Default 6. sampling_frequency Numeric. sampling frequency Hz. Default 200.","code":""},{"path":"/reference/compute_cutoff_correction_lowpass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Corrected Cutoff Frequency for Lowpass Filter — compute_cutoff_correction_lowpass","text":"Numeric. corrected cutoff frequency Hz.","code":""},{"path":"/reference/compute_derivative.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Derivative of Data — compute_derivative","title":"Compute Derivative of Data — compute_derivative","text":"function computes derivative data (e.g., angular position) using either smooth spline fit numerical gradient.","code":""},{"path":"/reference/compute_derivative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Derivative of Data — compute_derivative","text":"","code":"compute_derivative(x, y, method = c(\"spline\", \"gradient\"), deriv = 1)"},{"path":"/reference/compute_derivative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Derivative of Data — compute_derivative","text":"x numeric vector representing independent variable (e.g., time). y numeric vector representing dependent variable (e.g., angular position). method character string specifying method compute derivative. Options \"spline\" smooth spline fitting \"gradient\" numerical gradient using pracma::gradient. Default \"spline\". deriv integer specifying order derivative. Default 1 first derivative. Higher values (e.g., 2) return higher derivatives (second derivative, etc.).","code":""},{"path":"/reference/compute_derivative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Derivative of Data — compute_derivative","text":"numeric vector representing derivative (e.g., angular velocity acceleration).","code":""},{"path":"/reference/compute_derivative_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Derivatives for Each Column in Data Frame — compute_derivative_df","title":"Compute Derivatives for Each Column in Data Frame — compute_derivative_df","text":"function computes angular velocity (first derivative angular position) column data data frame, based specified time column. derivative can computed using either smooth spline fit numerical gradient.","code":""},{"path":"/reference/compute_derivative_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Derivatives for Each Column in Data Frame — compute_derivative_df","text":"","code":"compute_derivative_df(   data,   time_col = 1,   method = c(\"spline\", \"gradient\"),   deriv = 1 )"},{"path":"/reference/compute_derivative_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Derivatives for Each Column in Data Frame — compute_derivative_df","text":"data data frame first column time values columns represent data (e.g., angular positions). time_col character numeric value specifying time column. numeric, represents column position. character, represents column name. method character string specifying method compute derivative. Options \"spline\" smooth spline fitting \"gradient\" numerical gradient using pracma::gradient. Default \"spline\". deriv integer specifying order derivative. Default 1 first derivative. Higher values (e.g., 2) return higher derivatives (second derivative, etc.).","code":""},{"path":"/reference/compute_derivative_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Derivatives for Each Column in Data Frame — compute_derivative_df","text":"data frame structure input, columns angular velocities (higher derivatives).","code":""},{"path":"/reference/compute_derivative_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Derivatives for Each Column in Data Frame — compute_derivative_df","text":"","code":"# Example data frame data <- data.frame(time = seq(0, 10, by = 0.1),                    position1 = sin(seq(0, 10, by = 0.1)),                    position2 = cos(seq(0, 10, by = 0.1)))  # Compute derivatives using spline method (time column by name) angular_velocities_spline <- compute_derivative_dataframe(data, time_col = \"time\", method = \"spline\", deriv = 1) #> Error in compute_derivative_dataframe(data, time_col = \"time\", method = \"spline\",     deriv = 1): could not find function \"compute_derivative_dataframe\"  # Compute derivatives using gradient method (time column by position) angular_velocities_gradient <- compute_derivative_dataframe(data, time_col = 1, method = \"gradient\", deriv = 1) #> Error in compute_derivative_dataframe(data, time_col = 1, method = \"gradient\",     deriv = 1): could not find function \"compute_derivative_dataframe\""},{"path":"/reference/compute_frame_orientation.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Frame Orientation — compute_frame_orientation","title":"Compute Frame Orientation — compute_frame_orientation","text":"function computes frame orientation based two input vectors.","code":""},{"path":"/reference/compute_frame_orientation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Frame Orientation — compute_frame_orientation","text":"","code":"compute_frame_orientation(v1, v2, recompute, frameorder)"},{"path":"/reference/compute_frame_orientation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Frame Orientation — compute_frame_orientation","text":"v1 numeric matrix data frame row represents vector. v2 numeric matrix data frame row represents vector. recompute integer indicating whether recompute orientation: 1: Recompute u1 cross product u2 u3. 2: Recompute u2 cross product u3 u1. frameorder numeric vector length 3 specifying order frames.","code":""},{"path":"/reference/compute_frame_orientation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Frame Orientation — compute_frame_orientation","text":"3-dimensional array slice corresponds 3x3 orientation matrix.","code":""},{"path":"/reference/compute_frame_orientation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Frame Orientation — compute_frame_orientation","text":"","code":"v1 <- matrix(c(1, 0, 0, 0, 1, 0, 0, 0, 1), nrow = 3, byrow = TRUE) v2 <- matrix(c(0, 1, 0, 0, 0, 1, 1, 0, 0), nrow = 3, byrow = TRUE) recompute <- 1 frameorder <- c(1, 2, 3) compute_frame_orientation(v1, v2, recompute, frameorder) #> Loading required package: pracma #> , , 1 #>  #>      [,1] [,2] [,3] #> [1,]    1    0    0 #> [2,]    0    1    0 #> [3,]    0    0    1 #>  #> , , 2 #>  #>      [,1] [,2] [,3] #> [1,]    0    1    0 #> [2,]    0    0    1 #> [3,]    1    0    0 #>  #> , , 3 #>  #>      [,1] [,2] [,3] #> [1,]    0    0    1 #> [2,]    1    0    0 #> [3,]    0    1    0 #>"},{"path":"/reference/compute_hjc_regression.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Hip Joint Center using Harrington's of Bell and Brand's Method — compute_hjc_regression","title":"Compute Hip Joint Center using Harrington's of Bell and Brand's Method — compute_hjc_regression","text":"function computes right left hip joint centers based Harrington's formula.","code":""},{"path":"/reference/compute_hjc_regression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Hip Joint Center using Harrington's of Bell and Brand's Method — compute_hjc_regression","text":"","code":"compute_hjc_regression(   data,   LASIS_name = \"L.ASIS\",   RASIS_name = \"R.ASIS\",   LPSIS_name = \"L.PSIS\",   RPSIS_name = \"R.PSIS\",   RHJC_name = \"R.HJC\",   LHJC_name = \"L.HJC\",   method = \"harrington\",   append = TRUE )"},{"path":"/reference/compute_hjc_regression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Hip Joint Center using Harrington's of Bell and Brand's Method — compute_hjc_regression","text":"data data frame containing marker trajectories columns corresponding names specified `LASIS_name`, `RASIS_name`, `LPSIS_name`, `RPSIS_name` parameters. LASIS_name string specifying column name pattern left anterior superior iliac spine markers data. RASIS_name string specifying column name pattern right anterior superior iliac spine markers data. LPSIS_name string specifying column name pattern left posterior superior iliac spine markers data. RPSIS_name string specifying column name pattern right posterior superior iliac spine markers data. RHJC_name string specifying prefix right hip joint center column names output. LHJC_name string specifying prefix left hip joint center column names output. method string specifying method use calculations. Options \"harrington\" \"bell\". Default \"harrington\". append Logical. TRUE, appends computed hip joint center columns original data frame. FALSE, returns list containing computed hip joint center data frames.","code":""},{"path":"/reference/compute_hjc_regression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Hip Joint Center using Harrington's of Bell and Brand's Method — compute_hjc_regression","text":"data frame appended hip joint center columns list two data frames   containing right left hip joint centers.","code":""},{"path":"/reference/compute_hjc_regression.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute Hip Joint Center using Harrington's of Bell and Brand's Method — compute_hjc_regression","text":"Bell AL, Pederson DR, Brand RA (1989) Prediction hip joint center location external landmarks. Human Movement Science. 8:3-16: Bell AL, Pedersen DR, Brand RA (1990) Comparison Accuracy Several hip Center Location Prediction Methods. J Biomech. 23, 617-621. Harrington , Zavatsky AB, Lawson SE, Yuan Z, Theologis TN.(2007) Prediction hip joint centre adults, children, patients cerebral palsy based magnetic resonance imaging. J Biomech. 2007;40(3):595-602. Epub 2006 Apr 3.","code":""},{"path":"/reference/compute_impulse.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Area Under the Curve (AUC) Using Trapezoidal Integration — compute_impulse","title":"Compute Area Under the Curve (AUC) Using Trapezoidal Integration — compute_impulse","text":"function calculates area curve (AUC) using trapezoidal rule `pracma` package. also supports computing positive AUC (sum areas x-axis) negative AUC (sum areas x-axis).","code":""},{"path":"/reference/compute_impulse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Area Under the Curve (AUC) Using Trapezoidal Integration — compute_impulse","text":"","code":"compute_impulse(time, variable, type = \"total\")"},{"path":"/reference/compute_impulse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Area Under the Curve (AUC) Using Trapezoidal Integration — compute_impulse","text":"time numeric vector representing x-coordinates data points, typically time seconds. variable numeric vector representing y-coordinates data points, typically kinetic quantity like force moment. type character string specifying type AUC compute. Options \"total\", \"positive\", \"negative\". Default \"total\".","code":""},{"path":"/reference/compute_impulse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Area Under the Curve (AUC) Using Trapezoidal Integration — compute_impulse","text":"numeric value representing computed AUC based specified type.","code":""},{"path":"/reference/compute_impulse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Area Under the Curve (AUC) Using Trapezoidal Integration — compute_impulse","text":"","code":"# Example time and variable data time <- c(1, 2, 3, 4, 5) variable <- c(-2, 3, 5, -7, 6) # Compute total AUC auc_total <- compute_impulse(time, variable, type = \"total\") print(auc_total) #> [1] 3 # Compute positive AUC auc_positive <- compute_impulse(time, variable, type = \"positive\") print(auc_positive) #> [1] 11 # Compute negative AUC auc_negative <- compute_impulse(time, variable, type = \"negative\") print(auc_negative) #> [1] -8"},{"path":"/reference/compute_jc_mid.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Euclidean Average of Two 3D Vectors — compute_jc_mid","title":"Compute Euclidean Average of Two 3D Vectors — compute_jc_mid","text":"function computes Euclidean average two 3D vectors row data frame, commonly used find joint centre (e.g., knee, ankle, etc.).","code":""},{"path":"/reference/compute_jc_mid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Euclidean Average of Two 3D Vectors — compute_jc_mid","text":"","code":"compute_jc_mid(   data,   marker_name_1,   marker_name_2,   jc_name = \"jc\",   append = TRUE )"},{"path":"/reference/compute_jc_mid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Euclidean Average of Two 3D Vectors — compute_jc_mid","text":"data data frame containing columns 3D vectors. marker_name_1 string specifying column name pattern first 3D vector data frame. marker_name_2 string specifying column name pattern second 3D vector data frame. jc_name string specifying prefix average vector (joint centre) column names output. append Logical. TRUE, appends computed average vector new columns original data frame.","code":""},{"path":"/reference/compute_jc_mid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Euclidean Average of Two 3D Vectors — compute_jc_mid","text":"data frame computed average vector either appended original data frame    separate data frame depending `append` argument.","code":""},{"path":"/reference/compute_joint_angles.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Joint Angles from Rotation Frames — compute_joint_angles","title":"Compute Joint Angles from Rotation Frames — compute_joint_angles","text":"function computes Euler angles series 3x3 rotation matrices.","code":""},{"path":"/reference/compute_joint_angles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Joint Angles from Rotation Frames — compute_joint_angles","text":"","code":"compute_joint_angles(rotation_frames)"},{"path":"/reference/compute_joint_angles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Joint Angles from Rotation Frames — compute_joint_angles","text":"rotation_frames 3-dimensional array size 3x3xN, 3x3 slice represents rotation matrix.","code":""},{"path":"/reference/compute_joint_angles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Joint Angles from Rotation Frames — compute_joint_angles","text":"matrix size N x 3, row contains Euler angles (degrees) corresponding 3x3 rotation matrix.","code":""},{"path":"/reference/compute_moment_arm_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Moment Arm Curve for a Muscle-Coordinate Pair in an OpenSim Model — compute_moment_arm_curve","title":"Compute Moment Arm Curve for a Muscle-Coordinate Pair in an OpenSim Model — compute_moment_arm_curve","text":"function computes moment arm curve specified muscle coordinate OpenSim model, iterating coordinate's range. moment arm calculated increments specified angle can written file returned data frame.","code":""},{"path":"/reference/compute_moment_arm_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Moment Arm Curve for a Muscle-Coordinate Pair in an OpenSim Model — compute_moment_arm_curve","text":"","code":"compute_moment_arm_curve(   model_input_file = \"../TestData/Model_SCALED.osim\",   coordinate = \"knee_angle_r\",   muscle = \"vasmed_r\",   file_output = \"vasmed_r_knee_angle_r_moment_arm.sto\",   deg_increment = 10,   write_file = FALSE,   return_object = TRUE )"},{"path":"/reference/compute_moment_arm_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Moment Arm Curve for a Muscle-Coordinate Pair in an OpenSim Model — compute_moment_arm_curve","text":"model_input_file string representing path OpenSim model file. Default \"../TestData/Model_SCALED.osim\". coordinate string indicating name coordinate interest. Default \"knee_angle_r\". muscle string indicating name muscle interest. Default \"vasmed_r\". file_output string representing file path write moment arm data. Default \"vasmed_r_knee_angle_r_moment_arm.sto\". deg_increment angular increment (degrees) moment arm computed. Default 10. write_file Logical: TRUE, writes moment arm values file. Default FALSE. return_object Logical: TRUE, returns moment arm data data frame. Default TRUE.","code":""},{"path":"/reference/compute_moment_arm_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Moment Arm Curve for a Muscle-Coordinate Pair in an OpenSim Model — compute_moment_arm_curve","text":"`return_object` TRUE, data frame containing computed moment arm values. Otherwise, nothing returned.","code":""},{"path":"/reference/compute_muscle_volume_scale_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Strength Scale Factor Based on Height and Mass — compute_muscle_volume_scale_factor","title":"Calculate Strength Scale Factor Based on Height and Mass — compute_muscle_volume_scale_factor","text":"function computes muscle volume scale factor based individual's height  mass relative reference values Rajagopal et al. (2016) using regression equations Handsfield et al.","code":""},{"path":"/reference/compute_muscle_volume_scale_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Strength Scale Factor Based on Height and Mass — compute_muscle_volume_scale_factor","text":"","code":"compute_muscle_volume_scale_factor(   height,   mass,   height_ref = 1.68,   mass_ref = 75.337 )"},{"path":"/reference/compute_muscle_volume_scale_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Strength Scale Factor Based on Height and Mass — compute_muscle_volume_scale_factor","text":"height numeric value representing height individual meters. mass numeric value representing mass individual kilograms. height_ref numeric value reference height meters (default 1.68). mass_ref numeric value reference mass kilograms (default 75.337).","code":""},{"path":"/reference/compute_muscle_volume_scale_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Strength Scale Factor Based on Height and Mass — compute_muscle_volume_scale_factor","text":"numeric value representing calculated strength scale factor.","code":""},{"path":"/reference/compute_rmse.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Root Mean Square Error (RMSE) with Normalization Options (untested) — compute_rmse","title":"Compute Root Mean Square Error (RMSE) with Normalization Options (untested) — compute_rmse","text":"function calculates Root Mean Square Error (RMSE) two numeric vectors (signals) offers options normalizing RMSE.","code":""},{"path":"/reference/compute_rmse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Root Mean Square Error (RMSE) with Normalization Options (untested) — compute_rmse","text":"","code":"compute_rmse(observed, predicted, normalise = \"none\")"},{"path":"/reference/compute_rmse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Root Mean Square Error (RMSE) with Normalization Options (untested) — compute_rmse","text":"observed numeric vector observed values (true values). predicted numeric vector predicted values (model values). normalise character string specifying normalization method. Options \"none\", \"max\", \"min\", \"range\", \"median\", \"mean\" \"sd\". Default \"none\".","code":""},{"path":"/reference/compute_rmse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Root Mean Square Error (RMSE) with Normalization Options (untested) — compute_rmse","text":"numeric value representing normalised RMSE observed predicted values.","code":""},{"path":"/reference/compute_rmse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Root Mean Square Error (RMSE) with Normalization Options (untested) — compute_rmse","text":"","code":"# Example observed and predicted signals observed <- c(1.0, 2.0, 3.0, 4.0, 5.0) predicted <- c(1.1, 2.1, 2.9, 4.2, 5.0) # Compute RMSE without normalization rmse_no_norm <- compute_rmse(observed, predicted, normalise = \"none\") print(rmse_no_norm) #> [1] 0.1183216 # Compute RMSE normalised by the max value of the observed signal rmse_max <- compute_rmse(observed, predicted, normalise = \"max\") print(rmse_max) #> [1] 0.02366432"},{"path":"/reference/compute_rotation_between_frames.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Rotation Between Frames — compute_rotation_between_frames","title":"Compute Rotation Between Frames — compute_rotation_between_frames","text":"function calculates rotation matrix corresponding frames two 3D arrays.","code":""},{"path":"/reference/compute_rotation_between_frames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Rotation Between Frames — compute_rotation_between_frames","text":"","code":"compute_rotation_between_frames(parent, child)"},{"path":"/reference/compute_rotation_between_frames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Rotation Between Frames — compute_rotation_between_frames","text":"parent 3-dimensional array slice represents frame rotation matrices. child 3-dimensional array dimensions `parent`, representing another set rotation matrices.","code":""},{"path":"/reference/compute_rotation_between_frames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Rotation Between Frames — compute_rotation_between_frames","text":"3-dimensional array dimensions `parent` `child`, slice represents rotation matrix corresponding frames.","code":""},{"path":"/reference/compute_work.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Area Under the Curve (AUC) Using Trapezoidal Integration — compute_work","title":"Compute Area Under the Curve (AUC) Using Trapezoidal Integration — compute_work","text":"function calculates area curve (AUC) using trapezoidal rule `pracma` package. also supports computing positive AUC (sum areas x-axis) negative AUC (sum areas x-axis).","code":""},{"path":"/reference/compute_work.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Area Under the Curve (AUC) Using Trapezoidal Integration — compute_work","text":"","code":"compute_work(time, power, type = \"total\")"},{"path":"/reference/compute_work.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Area Under the Curve (AUC) Using Trapezoidal Integration — compute_work","text":"time numeric vector representing x-coordinates data points, typically time seconds. power numeric vector representing y-coordinates data points, typically power watts. type character string specifying type AUC compute. Options \"total\", \"positive\", \"negative\". Default \"total\".","code":""},{"path":"/reference/compute_work.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Area Under the Curve (AUC) Using Trapezoidal Integration — compute_work","text":"numeric value representing computed AUC based specified type.","code":""},{"path":"/reference/compute_work.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Area Under the Curve (AUC) Using Trapezoidal Integration — compute_work","text":"","code":"# Example time and power data time <- c(1, 2, 3, 4, 5) power <- c(-2, 3, 5, -7, 6) # Compute total AUC auc_total <- compute_work(time, power, type = \"total\") print(auc_total) #> [1] 3 # Compute positive AUC auc_positive <- compute_work(time, power, type = \"positive\") print(auc_positive) #> [1] 11 # Compute negative AUC auc_negative <- compute_work(time, power, type = \"negative\") print(auc_negative) #> [1] -8"},{"path":"/reference/create_rotation_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a 3D Rotation Matrix — create_rotation_matrix","title":"Create a 3D Rotation Matrix — create_rotation_matrix","text":"Generates 3x3 rotation matrix rotating points 3D space around x, y, z axis specified angle degrees.","code":""},{"path":"/reference/create_rotation_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a 3D Rotation Matrix — create_rotation_matrix","text":"","code":"create_rotation_matrix(angle_deg, axis)"},{"path":"/reference/create_rotation_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a 3D Rotation Matrix — create_rotation_matrix","text":"angle_deg Numeric. rotation angle degrees. axis Character. axis rotation: \"x\", \"y\", \"z\".","code":""},{"path":"/reference/create_rotation_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a 3D Rotation Matrix — create_rotation_matrix","text":"3x3 numeric matrix representing rotation.","code":""},{"path":"/reference/create_rotation_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a 3D Rotation Matrix — create_rotation_matrix","text":"","code":"create_rotation_matrix(90, \"z\") #>              [,1]          [,2] [,3] #> [1,] 6.123032e-17 -1.000000e+00    0 #> [2,] 1.000000e+00  6.123032e-17    0 #> [3,] 0.000000e+00  0.000000e+00    1"},{"path":"/reference/create_rotation_matrix_from_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Rotation Vector to Rotation Matrix — create_rotation_matrix_from_vector","title":"Convert Rotation Vector to Rotation Matrix — create_rotation_matrix_from_vector","text":"Converts 3-element rotation vector (axis-angle representation) 3x3 rotation matrix, using Rodrigues' rotation formula. Equivalent Python's scipy.spatial.transform.Rotation.from_rotvec.","code":""},{"path":"/reference/create_rotation_matrix_from_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Rotation Vector to Rotation Matrix — create_rotation_matrix_from_vector","text":"","code":"create_rotation_matrix_from_vector(theta3, in_degrees = FALSE)"},{"path":"/reference/create_rotation_matrix_from_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Rotation Vector to Rotation Matrix — create_rotation_matrix_from_vector","text":"theta3 numeric vector length 3, representing rotation vector. direction specifies axis rotation, magnitude specifies angle (radians default). in_degrees Logical. TRUE, elements theta3 interpreted degrees converted radians internally. Default FALSE.","code":""},{"path":"/reference/create_rotation_matrix_from_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Rotation Vector to Rotation Matrix — create_rotation_matrix_from_vector","text":"3x3 numeric matrix representing rotation.","code":""},{"path":"/reference/create_rotation_matrix_from_vector.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert Rotation Vector to Rotation Matrix — create_rotation_matrix_from_vector","text":"https://en.wikipedia.org/wiki/Axis-angle_representation#Rotation_vector https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.from_rotvec.html","code":""},{"path":"/reference/create_rotation_matrix_from_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Rotation Vector to Rotation Matrix — create_rotation_matrix_from_vector","text":"","code":"create_rotation_matrix_from_vector(c(0.5, 0.4, 0.3)) #>            [,1]       [,2]       [,3] #> [1,]  0.8801223 -0.1797154  0.4394168 #> [2,]  0.3715198  0.8369663 -0.4018214 #> [3,] -0.2955635  0.5169040  0.8034006 create_rotation_matrix_from_vector(c(30, 0, 0), in_degrees = TRUE) #>      [,1]      [,2]       [,3] #> [1,]    1 0.0000000  0.0000000 #> [2,]    0 0.8660254 -0.5000000 #> [3,]    0 0.5000000  0.8660254"},{"path":"/reference/filter_lowpass_pad_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Markers with Padding to Avoid Artifacts — filter_lowpass_pad_df","title":"Filter Markers with Padding to Avoid Artifacts — filter_lowpass_pad_df","text":"function filters marker data using low-pass Butterworth filter padding start end data avoid artifacts.","code":""},{"path":"/reference/filter_lowpass_pad_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Markers with Padding to Avoid Artifacts — filter_lowpass_pad_df","text":"","code":"filter_lowpass_pad_df(   data,   time_col = \"Time\",   exclude_cols = c(1, 2),   cut_off = 6,   sample_rate = 200,   order = 2,   pad_time = 0.5 )"},{"path":"/reference/filter_lowpass_pad_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Markers with Padding to Avoid Artifacts — filter_lowpass_pad_df","text":"data data frame containing marker data filtered. time_col string indicating name column containing time vector. exclude_cols vector column indices (names) exclude filtering. Usually 1 2 remove Time Frame. cut_off Numeric. cut-frequency low-pass filter Hz. sample_rate Numeric. sample rate data Hz. order Numeric. order Butterworth filter. pad_time Numeric. time length pad data start end. use_spline_padding Logical. Whether use spline interpolation padding (TRUE) replicate first/last rows (FALSE). Default FALSE.","code":""},{"path":"/reference/filter_lowpass_pad_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Markers with Padding to Avoid Artifacts — filter_lowpass_pad_df","text":"data frame filtered marker data, padding removed.","code":""},{"path":"/reference/get_analog_c3d_osim.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Analog Data from C3D File — get_analog_c3d_osim","title":"Get Analog Data from C3D File — get_analog_c3d_osim","text":"function reads C3D file extracts analog data,  optionally writing .sto file /returning  opensim data table object.","code":""},{"path":"/reference/get_analog_c3d_osim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Analog Data from C3D File — get_analog_c3d_osim","text":"","code":"get_analog_c3d_osim(   file_input,   file_output = \"Analog.sto\",   write_file = TRUE,   return_object = FALSE )"},{"path":"/reference/get_analog_c3d_osim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Analog Data from C3D File — get_analog_c3d_osim","text":"file_input string specifying path input C3D file. file_output string specifying path output .sto file (default \"Analog.sto\"). write_file logical value indicating whether write output file (default TRUE). return_object logical value indicating whether return analog data object (default FALSE).","code":""},{"path":"/reference/get_analog_c3d_osim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Analog Data from C3D File — get_analog_c3d_osim","text":"`return_object` TRUE, returns analog data object; otherwise, returns NULL.","code":""},{"path":"/reference/get_EMG_c3d_osim.html","id":null,"dir":"Reference","previous_headings":"","what":"Get EMG Data from C3D File — get_EMG_c3d_osim","title":"Get EMG Data from C3D File — get_EMG_c3d_osim","text":"function reads C3D file, extracts EMG data, optionally writes .sto file /returns data data frame.","code":""},{"path":"/reference/get_EMG_c3d_osim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get EMG Data from C3D File — get_EMG_c3d_osim","text":"","code":"get_EMG_c3d_osim(   file_input,   file_output = \"EMG_RAW.sto\",   columns_exclude = c(1L:40L),   EMG_names = c(\"Voltage.1\", \"Voltage.2\", \"Voltage.3\", \"Voltage.4\", \"Voltage.6\",     \"Voltage.7\", \"Voltage.8\", \"Voltage.9\", \"Voltage.10\", \"Voltage.12\", \"Voltage.13\",     \"Voltage.14\", \"Voltage.15\", \"Voltage.16\"),   Muscle_names = c(\"vaslat_r\", \"recfem_r\", \"vasmed_r\", \"vasmed_l\", \"vaslat_l\", \"tfl_r\",     \"tfl_l\", \"bflh_l\", \"semiten_l\", \"semiten_r\", \"bflh_r\", \"gaslat_l\", \"gasmed_r\",     \"gaslat_r\"),   write_file = TRUE,   return_object = FALSE )"},{"path":"/reference/get_EMG_c3d_osim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get EMG Data from C3D File — get_EMG_c3d_osim","text":"file_input string specifying path input C3D file. file_output string specifying path output .sto file (default \"EMG_RAW.sto\"). columns_exclude numeric vector indices columns exclude EMG data. EMG_names character vector specifying names EMG channels extract (default includes \"Voltage.1\" \"Voltage.16\"). Muscle_names character vector specifying muscle names corresponding EMG data (default provided). write_file logical value indicating whether write output file (default TRUE). return_object logical value indicating whether return EMG data data frame (default FALSE).","code":""},{"path":"/reference/get_EMG_c3d_osim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get EMG Data from C3D File — get_EMG_c3d_osim","text":"`return_object` TRUE, returns EMG data data frame; otherwise, returns NULL.","code":""},{"path":"/reference/get_hex_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Hex Colors from a Color Scale — get_hex_colors","title":"Generate Hex Colors from a Color Scale — get_hex_colors","text":"function maps numeric values within specified range color gradient defined two colors. returns corresponding hex codes optionally plots color scale.","code":""},{"path":"/reference/get_hex_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Hex Colors from a Color Scale — get_hex_colors","text":"","code":"get_hex_colors(   numeric_values,   lower_bound = 0,   upper_bound = 1,   color_low = \"orange\",   color_high = \"green\",   resolution = 100,   plot_scale = FALSE )"},{"path":"/reference/get_hex_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Hex Colors from a Color Scale — get_hex_colors","text":"numeric_values numeric vector values map color scale. lower_bound numeric value specifying lower bound numeric values (default: 0). upper_bound numeric value specifying upper bound numeric values (default: 1). color_low string specifying color low end gradient (default: \"orange\"). color_high string specifying color high end gradient (default: \"green\"). resolution number colors generate color gradient (default: 100). plot_scale logical value indicating whether plot color scale (default: FALSE).","code":""},{"path":"/reference/get_hex_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Hex Colors from a Color Scale — get_hex_colors","text":"vector hex color codes corresponding input numeric values.","code":""},{"path":"/reference/get_hex_colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Hex Colors from a Color Scale — get_hex_colors","text":"","code":"# Example usage of get_hex_colors numeric_values <- c(5, 10, 15) get_hex_colors(numeric_values, lower_bound = 0, upper_bound = 20, color_low = \"blue\", color_high = \"red\") #> [1] \"#4000BE\" \"#80007E\" \"#BE0040\""},{"path":"/reference/prescribe_motion_osim.html","id":null,"dir":"Reference","previous_headings":"","what":"Prescribe Motion to OpenSim Model — prescribe_motion_osim","title":"Prescribe Motion to OpenSim Model — prescribe_motion_osim","text":"function prescribes motion coordinates OpenSim model based inverse kinematics (IK) data. can save modified model file return updated model object. Note input model must already locked joints welded prior using function.","code":""},{"path":"/reference/prescribe_motion_osim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prescribe Motion to OpenSim Model — prescribe_motion_osim","text":"","code":"prescribe_motion_osim(   model_input_file = \"model_file.osim\",   model_output_file = \"model_prescribed.osim\",   IK_file = \"IK.mot\",   low_pass_cutoff = 6,   write_file = TRUE,   return_object = FALSE )"},{"path":"/reference/prescribe_motion_osim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prescribe Motion to OpenSim Model — prescribe_motion_osim","text":"model_input_file string specifying path input OpenSim model file (default \"model_file.osim\"). model_output_file string specifying path output updated OpenSim model file (default \"model_prescribed.osim\"). IK_file string specifying path IK data file (default \"IK.mot\"). low_pass_cutoff numeric value specifying cutoff frequency low-pass filter (default 6). ignored numeric value >= 1. write_file logical value indicating whether write updated model file (default TRUE). return_object logical value indicating whether return updated model object (default FALSE).","code":""},{"path":"/reference/prescribe_motion_osim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prescribe Motion to OpenSim Model — prescribe_motion_osim","text":"`return_object` TRUE, returns modified OpenSim model object; otherwise, NULL.","code":""},{"path":"/reference/read.trc.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a trc file — read.trc","title":"Read a trc file — read.trc","text":"Read trc file","code":""},{"path":"/reference/read.trc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a trc file — read.trc","text":"","code":"read.trc()"},{"path":"/reference/read.trc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a trc file — read.trc","text":"x trc file","code":""},{"path":"/reference/read.trc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a trc file — read.trc","text":"Dataframe containing marker data extracted trc file","code":""},{"path":"/reference/read_mot_sto.html","id":null,"dir":"Reference","previous_headings":"","what":"Read OpenSim MOT or STO File as Data Frame — read_mot_sto","title":"Read OpenSim MOT or STO File as Data Frame — read_mot_sto","text":"function reads OpenSim MOT STO file data frame. file read locating line containing word \"time\".","code":""},{"path":"/reference/read_mot_sto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read OpenSim MOT or STO File as Data Frame — read_mot_sto","text":"","code":"read_mot_sto(filename)"},{"path":"/reference/read_mot_sto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read OpenSim MOT or STO File as Data Frame — read_mot_sto","text":"filename character string specifying path file read.","code":""},{"path":"/reference/read_mot_sto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read OpenSim MOT or STO File as Data Frame — read_mot_sto","text":"data frame containing data file, starting line includes word \"time\".","code":""},{"path":"/reference/read_trc.html","id":null,"dir":"Reference","previous_headings":"","what":"Read TRC File into Data Frame — read_trc","title":"Read TRC File into Data Frame — read_trc","text":"function reads TRC (marker trajectory) file returns data frame. function processes header extract marker names adjusts column names accordingly.","code":""},{"path":"/reference/read_trc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read TRC File into Data Frame — read_trc","text":"","code":"read_trc(filename)"},{"path":"/reference/read_trc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read TRC File into Data Frame — read_trc","text":"filename character string specifying path TRC file read.","code":""},{"path":"/reference/read_trc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read TRC File into Data Frame — read_trc","text":"data frame columns frame number, time, marker coordinates (X, Y, Z).","code":""},{"path":"/reference/remove_side_osim.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Side from OpenSim Model — remove_side_osim","title":"Remove Side from OpenSim Model — remove_side_osim","text":"function removes actuators specified side (left right) OpenSim model.","code":""},{"path":"/reference/remove_side_osim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Side from OpenSim Model — remove_side_osim","text":"","code":"remove_side_osim(   model_input_file = \"Baseline_markers.osim\",   model_output_file = \"Baseline_markers_removed.osim\",   side = \"l\" )"},{"path":"/reference/remove_side_osim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Side from OpenSim Model — remove_side_osim","text":"model_input_file string representing path input OpenSim model file. Default \"Baseline_markers.osim\". model_output_file string representing path output OpenSim model file. Default \"Baseline_markers_removed.osim\". side string indicating side (left right) body remove actuators . Default \"l\" (left).","code":""},{"path":"/reference/remove_side_osim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Side from OpenSim Model — remove_side_osim","text":"function returns nothing, writes modified OpenSim model `model_output_file`.","code":""},{"path":"/reference/replace_side_torque_osim.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace Side Torque in OpenSim Model — replace_side_torque_osim","title":"Replace Side Torque in OpenSim Model — replace_side_torque_osim","text":"function removes actuators specified side (left right) OpenSim model adds new coordinate actuators (torques) corresponding side certain body parts (e.g., hip, knee, ankle). Locked joints automatically skipped.","code":""},{"path":"/reference/replace_side_torque_osim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace Side Torque in OpenSim Model — replace_side_torque_osim","text":"","code":"replace_side_torque_osim(   model_input_file = \"Baseline_markers.osim\",   model_output_file = \"Baseline_markers_removed.osim\",   side = \"l\" )"},{"path":"/reference/replace_side_torque_osim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace Side Torque in OpenSim Model — replace_side_torque_osim","text":"model_input_file string representing path input OpenSim model file. Default \"Baseline_markers.osim\". model_output_file string representing path output OpenSim model file. Default \"Baseline_markers_removed.osim\". side string indicating side (left right) body remove actuators . Default \"l\" (left).","code":""},{"path":"/reference/replace_side_torque_osim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace Side Torque in OpenSim Model — replace_side_torque_osim","text":"function returns nothing, writes modified OpenSim model `model_output_file`.","code":""},{"path":"/reference/resample.html","id":null,"dir":"Reference","previous_headings":"","what":"Resample a numeric data frame (where the first column represents time) to the specified sample rate — resample","title":"Resample a numeric data frame (where the first column represents time) to the specified sample rate — resample","text":"function resamples numeric data frame specified sample rate using interpolation.","code":""},{"path":"/reference/resample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resample a numeric data frame (where the first column represents time) to the specified sample rate — resample","text":"","code":"resample(data, sample_rate_output = 100, method = \"cubic\")"},{"path":"/reference/resample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resample a numeric data frame (where the first column represents time) to the specified sample rate — resample","text":"data numeric data frame column time series resampled. first column time vector. sample_rate_output Integer, desired sample rate (Hz) output signal. Default 100Hz. method Character, interpolation method use. Default \"cubic\". Options include \"linear\", \"nearest\", \"spline\", \"pchip\", etc.","code":""},{"path":"/reference/resample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resample a numeric data frame (where the first column represents time) to the specified sample rate — resample","text":"data frame number columns `data`, column resampled specified sample rate.","code":""},{"path":"/reference/rotate_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate 3D Coordinates Using a Rotation Matrix — rotate_coords","title":"Rotate 3D Coordinates Using a Rotation Matrix — rotate_coords","text":"Applies 3x3 rotation matrix set 3D coordinates.","code":""},{"path":"/reference/rotate_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotate 3D Coordinates Using a Rotation Matrix — rotate_coords","text":"","code":"rotate_coords(x, y, z, rotation_matrix)"},{"path":"/reference/rotate_coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotate 3D Coordinates Using a Rotation Matrix — rotate_coords","text":"x, y, z Numeric vectors equal length representing 3D coordinates. rotation_matrix 3x3 numeric matrix used rotate coordinates.","code":""},{"path":"/reference/rotate_coords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rotate 3D Coordinates Using a Rotation Matrix — rotate_coords","text":"data frame rotated coordinates (`x`, `y`, `z`).","code":""},{"path":"/reference/rotate_coords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rotate 3D Coordinates Using a Rotation Matrix — rotate_coords","text":"","code":"rot_mat <- create_rotation_matrix(90, \"z\") rotate_coords(1, 0, 0, rot_mat) #>              x  y z #> 1 6.123032e-17 -1 0"},{"path":"/reference/rotate_markers.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate 3D Marker Coordinates in a Data Frame — rotate_markers","title":"Rotate 3D Marker Coordinates in a Data Frame — rotate_markers","text":"Applies 3D rotation marker columns data frame. Marker columns expected follow naming pattern: `marker_X`, `marker_Y`, `marker_Z`.","code":""},{"path":"/reference/rotate_markers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotate 3D Marker Coordinates in a Data Frame — rotate_markers","text":"","code":"rotate_markers(data, angle_deg, axis, ignore_case = T)"},{"path":"/reference/rotate_markers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotate 3D Marker Coordinates in a Data Frame — rotate_markers","text":"data data frame containing 3D marker coordinates. angle_deg Numeric. rotation angle degrees. axis Character. axis rotation: \"x\", \"y\", \"z\". ignore_case Logical. column name matching suffix (e.g., \"_X\") ignore case? Default TRUE.","code":""},{"path":"/reference/rotate_markers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rotate 3D Marker Coordinates in a Data Frame — rotate_markers","text":"data frame rotated marker coordinates.","code":""},{"path":"/reference/rotate_osim_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate an Opensim Data Table — rotate_osim_table","title":"Rotate an Opensim Data Table — rotate_osim_table","text":"function rotates specified OpenSim data table around given axis specified angle degrees.","code":""},{"path":"/reference/rotate_osim_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotate an Opensim Data Table — rotate_osim_table","text":"","code":"rotate_osim_table(table_object, axis = c(1, 0, 0), deg = -90)"},{"path":"/reference/rotate_osim_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotate an Opensim Data Table — rotate_osim_table","text":"table_object object representing OpenSim data table. axis numeric vector length 3 specifying rotation axis (default c(1, 0, 0)). deg numeric value specifying rotation angle degrees (default -90).","code":""},{"path":"/reference/rotate_osim_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rotate an Opensim Data Table — rotate_osim_table","text":"NULL. function modifies input `table_object` place.","code":""},{"path":"/reference/strength_scale_osim.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale Muscle Strength in OpenSim Model — strength_scale_osim","title":"Scale Muscle Strength in OpenSim Model — strength_scale_osim","text":"function scales muscle strength OpenSim model specified factor. can  save modified model file return updated model object.","code":""},{"path":"/reference/strength_scale_osim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale Muscle Strength in OpenSim Model — strength_scale_osim","text":"","code":"strength_scale_osim(   model_input_file = \"Baseline_model.osim\",   model_output_file = \"Baseline_model_stronger.osim\",   write_file = TRUE,   return_object = FALSE,   scaleFactor = 5 )"},{"path":"/reference/strength_scale_osim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale Muscle Strength in OpenSim Model — strength_scale_osim","text":"model_input_file string specifying path input OpenSim model file (default \"Baseline_model.osim\"). model_output_file string specifying path output updated OpenSim model file (default \"Baseline_model_stronger.osim\"). write_file logical value indicating whether write updated model file (default TRUE). return_object logical value indicating whether return updated model object (default FALSE). scaleFactor numeric value indicating scaling factor muscle strength (default 5).","code":""},{"path":"/reference/strength_scale_osim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale Muscle Strength in OpenSim Model — strength_scale_osim","text":"`return_object` TRUE, returns modified OpenSim model object; otherwise, NULL.","code":""},{"path":"/reference/strength_update_handsfield_osim.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Muscle Strength in OpenSim Model Using Handsfield Method — strength_update_handsfield_osim","title":"Update Muscle Strength in OpenSim Model Using Handsfield Method — strength_update_handsfield_osim","text":"function updates muscle strength scaled OpenSim model based reference model using  Handsfield scaling method. calculates new muscle properties can save modified model  file return updated model object.","code":""},{"path":"/reference/strength_update_handsfield_osim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Muscle Strength in OpenSim Model Using Handsfield Method — strength_update_handsfield_osim","text":"","code":"strength_update_handsfield_osim(   model_scaled_file = \"Baseline_scaled.osim\",   model_ref_file = \"Baseline_markers.osim\",   model_output_file = \"Model_updated.osim\",   write_file = TRUE,   return_object = FALSE,   scale_factor )"},{"path":"/reference/strength_update_handsfield_osim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Muscle Strength in OpenSim Model Using Handsfield Method — strength_update_handsfield_osim","text":"model_scaled_file string specifying path scaled OpenSim model file (default \"Baseline_scaled.osim\"). model_ref_file string specifying path reference OpenSim model file (default \"Baseline_markers.osim\"). model_output_file string specifying path output updated OpenSim model file (default \"Model_updated.osim\"). write_file logical value indicating whether write updated model file (default TRUE). return_object logical value indicating whether return updated model object (default FALSE). scale_factor numeric value indicating scaling factor muscle volume.","code":""},{"path":"/reference/strength_update_handsfield_osim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Muscle Strength in OpenSim Model Using Handsfield Method — strength_update_handsfield_osim","text":"`return_object` TRUE, returns modified OpenSim model object; otherwise, NULL.","code":""},{"path":"/reference/time_normalise.html","id":null,"dir":"Reference","previous_headings":"","what":"Time normalises continuous data — Time_normalise","title":"Time normalises continuous data — Time_normalise","text":"Takes dataframe containing continuous data resamples specified number points","code":""},{"path":"/reference/time_normalise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time normalises continuous data — Time_normalise","text":"","code":"Time_normalise()"},{"path":"/reference/time_normalise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time normalises continuous data — Time_normalise","text":"DF dataframe containing continuous data needs time normalised specified number points. first column data frame must time sample number column ascending order nodes numeric value indicates many points like data resampled ","code":""},{"path":"/reference/time_normalise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time normalises continuous data — Time_normalise","text":"dataframe nrow(nodes) contains resampled data","code":""},{"path":"/reference/update_muscle_colours_osim.html","id":null,"dir":"Reference","previous_headings":"","what":"Update OpenSim Muscle Colours — update_muscle_colours_osim","title":"Update OpenSim Muscle Colours — update_muscle_colours_osim","text":"function updates muscle colours OpenSim model based given inputs. reads OpenSim model, updates muscle colours, saves model new file.","code":""},{"path":"/reference/update_muscle_colours_osim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update OpenSim Muscle Colours — update_muscle_colours_osim","text":"","code":"update_muscle_colours_osim(   model_input_file = \"Baseline_markers.osim\",   model_output_file = \"Baseline_markers_coloured.osim\",   colours = c(\"#009E73\", \"#009E73\"),   muscles = c(\"bflh140_r\", \"bfsh140_r\") )"},{"path":"/reference/update_muscle_colours_osim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update OpenSim Muscle Colours — update_muscle_colours_osim","text":"model_input_file Path input OpenSim model (.osim file). model_output_file Path save updated OpenSim model. colours vector colour codes (hex format) muscles updated. muscles vector muscle names updated model.","code":""},{"path":"/reference/update_muscle_colours_osim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update OpenSim Muscle Colours — update_muscle_colours_osim","text":".osim file updated muscle colours.","code":""},{"path":"/reference/visualise_3D_marker_position.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize 3D Marker Position — visualise_3D_marker_position","title":"Visualize 3D Marker Position — visualise_3D_marker_position","text":"Visualizes 3D positions markers specific time point using interactive 3D plots.","code":""},{"path":"/reference/visualise_3D_marker_position.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize 3D Marker Position — visualise_3D_marker_position","text":"","code":"visualise_3D_marker_position(data, selected_frame)"},{"path":"/reference/visualise_3D_marker_position.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize 3D Marker Position — visualise_3D_marker_position","text":"data dataframe containing time marker positions columns formatted `Time`, `markername_X`, `markername_Y`, `markername_Z`. selected_frame Numeric value indicating frame visualize marker positions.","code":""},{"path":"/reference/visualise_3D_marker_position.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize 3D Marker Position — visualise_3D_marker_position","text":"`plotly` object representing 3D scatter plot marker positions.","code":""},{"path":"/reference/visualize_3D_marker_frame_position.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize 3D Marker Frame Position — visualize_3D_marker_frame_position","title":"Visualize 3D Marker Frame Position — visualize_3D_marker_frame_position","text":"function visualizes 3D positions markers specified time point dataset. can also optionally display reference frame.","code":""},{"path":"/reference/visualize_3D_marker_frame_position.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize 3D Marker Frame Position — visualize_3D_marker_frame_position","text":"","code":"visualize_3D_marker_frame_position(   data,   selected_frame,   reference_frame,   origin )"},{"path":"/reference/visualize_3D_marker_frame_position.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize 3D Marker Frame Position — visualize_3D_marker_frame_position","text":"data data frame containing marker data, including columns '_X', '_Y', '_Z' suffixes marker positions. selected_frame numeric value representing time frame visualize markers. reference_frame 3x3 matrix representing reference frame (optional). column represent axis reference frame. origin 1x3 numeric vector representing origin point reference frame (optional).","code":""},{"path":"/reference/visualize_3D_marker_frame_position.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize 3D Marker Frame Position — visualize_3D_marker_frame_position","text":"Plotly 3D scatter plot visualizing marker positions selected time point, optional reference frame axes.","code":""},{"path":"/reference/write.trc.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a trc file — write.trc","title":"Write a trc file — write.trc","text":"Write trc file","code":""},{"path":"/reference/write.trc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a trc file — write.trc","text":"","code":"write.trc()"},{"path":"/reference/write.trc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a trc file — write.trc","text":"x dataframe containing data write trc. format produced read.trc() unit string contain unit measurement either \"mm\" \"m\" filename string identifying filename write file. Must end .trc","code":""},{"path":"/reference/write.trc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a trc file — write.trc","text":"trc file filename","code":""},{"path":"/reference/write_force_mot.html","id":null,"dir":"Reference","previous_headings":"","what":"Write GRF Data Frame to File — write_force_mot","title":"Write GRF Data Frame to File — write_force_mot","text":"function writes GRF (Ground Reaction Force) data frame file specific header format suitable use OpenSim.","code":""},{"path":"/reference/write_force_mot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write GRF Data Frame to File — write_force_mot","text":"","code":"write_force_mot(data, filename)"},{"path":"/reference/write_force_mot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write GRF Data Frame to File — write_force_mot","text":"data data frame containing GRF data. first column represent time. filename character string specifying name file data written. Include extension .mot compatability OpenSim.","code":""},{"path":"/reference/write_force_mot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write GRF Data Frame to File — write_force_mot","text":"","code":"# Create a sample GRF data frame df <- data.frame(time = 1:10, force = rnorm(10)) # Write the data frame to a file named \"grf_data.mot\" write_force_mot(df, \"grf_data.mot\") #> Warning: appending column names to file"},{"path":"/reference/write_mot_sto.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Data Frame to OpenSim MOT or STO File — write_mot_sto","title":"Write Data Frame to OpenSim MOT or STO File — write_mot_sto","text":"function writes data frame OpenSim MOT STO file specific header format.","code":""},{"path":"/reference/write_mot_sto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Data Frame to OpenSim MOT or STO File — write_mot_sto","text":"","code":"write_mot_sto(data, name = \"Coordinates\", inDegrees = \"no\", filename)"},{"path":"/reference/write_mot_sto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Data Frame to OpenSim MOT or STO File — write_mot_sto","text":"data data frame containing data written. column represents variable, first column represent time.. name character string specifying name file. Default \"Coordinates\". inDegrees character string specifying whether data degrees. Default \"\". Use \"yes\" degrees. filename character string specifying name file data written. Include extension .mot .sto compatability OpenSim.","code":""},{"path":"/reference/write_mot_sto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write Data Frame to OpenSim MOT or STO File — write_mot_sto","text":"","code":"# Create a sample data frame df <- data.frame(time = 1:10, value = sin(1:10)) # Write the data frame to a file named \"example.mot\" write_mot_sto(df, name = \"ExampleData\", inDegrees = \"no\", filename = \"example.mot\") #> Warning: appending column names to file"},{"path":"/reference/write_trc.html","id":null,"dir":"Reference","previous_headings":"","what":"Write TRC File from Data Frame — write_trc","title":"Write TRC File from Data Frame — write_trc","text":"function writes data frame TRC (marker trajectory) file format used motion capture data.","code":""},{"path":"/reference/write_trc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write TRC File from Data Frame — write_trc","text":"","code":"write_trc(data, unit = \"mm\", filename)"},{"path":"/reference/write_trc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write TRC File from Data Frame — write_trc","text":"data data frame containing marker data. first two columns frame number time, followed marker data X, Y, Z format. unit character string specifying unit measurement (e.g., \"mm\"). Default \"mm\". filename character string specifying path file written.","code":""},{"path":"/reference/write_trc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write TRC File from Data Frame — write_trc","text":"","code":"# Create a sample data frame with marker data df <- data.frame(Frame = 1:10, Time = seq(0, 1, length.out = 10),                   Marker1_X = rnorm(10), Marker1_Y = rnorm(10), Marker1_Z = rnorm(10),                  Marker2_X = rnorm(10), Marker2_Y = rnorm(10), Marker2_Z = rnorm(10)) # Write the data frame to a TRC file named \"example.trc\" write_trc(df, unit = \"mm\", filename = \"example.trc\") #> Warning: appending column names to file #> Warning: appending column names to file"}]
