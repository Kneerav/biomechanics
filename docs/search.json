[{"path":"/articles/marker-processing.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Processing 3D marker data","text":"Processing marker data involves following steps: Rotating data positive x, y, z axis point towards forward, , right, respectively Filtering data (usually cut-6-20Hz) Computing virtual markers Writing marker data .trc file Noting filtering data really necessary static trial (participant moving), virtual markers necessary cases (particularly dynamic trials). following example, assume extracted clipped data (rotations applied yet).","code":""},{"path":"/articles/marker-processing.html","id":"reading-data","dir":"Articles","previous_headings":"","what":"Reading data","title":"Processing 3D marker data","text":"First, read .trc file.","code":"library(dplyr) #> Warning: package 'dplyr' was built under R version 4.2.3 #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  #read in trc file, assuming that this is raw and not rotated df = read_trc(\"./data/static_z_up.trc\")"},{"path":"/articles/marker-processing.html","id":"visualise","dir":"Articles","previous_headings":"","what":"Visualise","title":"Processing 3D marker data","text":"can create 3D visual specified frame. , can see orientation data appears incorrect. motion capture systems typically “Z-” coordinate system, OpenSim expects “Y-”.","code":"#quick visual to check visualise_3D_marker_position(df, selected_frame = 1) #> Loading required package: plotly #> Loading required package: ggplot2 #>  #> Attaching package: 'plotly' #> The following object is masked from 'package:ggplot2': #>  #>     last_plot #> The following object is masked from 'package:stats': #>  #>     filter #> The following object is masked from 'package:graphics': #>  #>     layout"},{"path":"/articles/marker-processing.html","id":"rotate","dir":"Articles","previous_headings":"","what":"Rotate","title":"Processing 3D marker data","text":"can rotate data using rotate_markers() function. rotate_markers() function takes data.frame marker trajectories (read_trc()) rotates around specified axes specified amount. intuition around rotation, first recognise clockwise rotation around axis pointing negative. Therefore, rotating data positive y-axis = forward (.e., Vicon system) positive x-axis = forward (.e., OpenSim system) achieved multiple ways, one two anti-clockwise rotations 90 degrees, z- x-axis.","code":"#now rotate to OpenSim coordinate system (if needed) df_rotated =       #raw data   df %>%       #rotate anti-clockwise around z axis   rotate_markers(., angle_deg = 90, axis = \"z\") %>%       #rotate anti-clockwise around x axis   rotate_markers(., angle_deg = 90, axis = \"x\")  #visualise to check correct rotation visualise_3D_marker_position(df_rotated, selected_frame = 1)"},{"path":"/articles/marker-processing.html","id":"filter","dir":"Articles","previous_headings":"","what":"Filter","title":"Processing 3D marker data","text":"often filter marker data smooth . won’t make big difference case static trial, function (filter_lowpass_pad_df()) can used .trc data. Note functions also pads signal specified amount either side prior filtering, removes padding . helps remove artefact entering data. Choosing appropriate filter another discussion, context, low-pass Butterworth filter cut-6-15Hz fairly typical.","code":"#now lets add filtering (won't change much since this is static) df_filtered =       #get the rotated data   df_rotated %>%       #filter with zero-lag 4th order Butterworth filter (cutoff = 6Hz)   filter_lowpass_pad_df(.,                          time_col = \"Time\",                         exclude_cols = c(1, 2), #don't filter the Frame and Time data                                 cut_off = 6, #in Hz                                sample_rate = 200, #in Hz                                order = 2, #zero-lag filter, so the order doubles to 4                                pad_time = 0.5) #pad data by 500ms either side to avoid artefacts"},{"path":"/articles/marker-processing.html","id":"joint-centres","dir":"Articles","previous_headings":"","what":"Joint centres","title":"Processing 3D marker data","text":"static trials, often want compute joint centres. following demonstrates compute hip joint centre using regression equations (either “harrington” “bell” can specified), mid-point method knee ankle. step needed trial types, important static trials use scaling models.","code":"#finally, let's compute joint centres df_processed =       #get the filtered data   df_filtered %>%       #compute hip joint centres   compute_hjc_regression(.,                          LASIS_name = \"L.ASIS\",                          RASIS_name = \"R.ASIS\",                          LPSIS_name = \"L.PSIS\",                          RPSIS_name = \"R.PSIS\",                          RHJC_name = \"R.HJC\",                          LHJC_name = \"L.HJC\",                          method = \"harrington\") %>%  #most accurate regression method      #compute knee joint centres   compute_jc_mid(.,                   marker_name_1 = \"L.Knee.Med\",                   marker_name_2 = \"L.Knee.Lat\",                   jc_name = \"L.Knee\") %>%    compute_jc_mid(.,                   marker_name_1 = \"R.Knee.Med\",                   marker_name_2 = \"R.Knee.Lat\",                   jc_name = \"R.Knee\") %>%       #compute ankle joint centres   compute_jc_mid(.,                   marker_name_1 = \"L.Ankle.Med\",                   marker_name_2 = \"L.Ankle.Lat\",                   jc_name = \"L.Ankle\") %>%    compute_jc_mid(.,                   marker_name_1 = \"R.Ankle.Med\",                   marker_name_2 = \"R.Ankle.Lat\",                   jc_name = \"R.Ankle\")  #> Loading required package: pracma #>  #> Attaching package: 'pracma' #> The following objects are masked from 'package:magrittr': #>  #>     and, mod, or  #re-visualise, which should show the new joint centre markers visualise_3D_marker_position(df_processed, selected_frame = 1)"},{"path":"/articles/marker-processing.html","id":"write","dir":"Articles","previous_headings":"","what":"Write","title":"Processing 3D marker data","text":"Finally, can write processed marker data file subsequent analysis.","code":"#then write to file write_trc(df_processed, unit = \"mm\", \"./data/static_processed.trc\")"},{"path":"/articles/setting-up.html","id":"installing","dir":"Articles","previous_headings":"","what":"Installing","title":"Setting up for biomechanical analysis","text":"","code":"#install the remotes package if you don't akready have it install.packages(\"remotes\")  #install the package remotes::install_github(\"Kneerav/biomechanics\")"},{"path":"/articles/setting-up.html","id":"basic-setup","dir":"Articles","previous_headings":"","what":"Basic setup","title":"Setting up for biomechanical analysis","text":"get going basic setup, can just load library. Please note full functionality, also want OpenSim api set .","code":"library(biomechanics) #> Warning: replacing previous import 'ggplot2::last_plot' by 'plotly::last_plot' #> when loading 'biomechanics'"},{"path":"/articles/setting-up.html","id":"opensim-api","dir":"Articles","previous_headings":"","what":"OpenSim api","title":"Setting up for biomechanical analysis","text":"functions depend OpenSim api (https://simtk.org/projects/opensim). set , first need set Python environment. Download install either Anaconda Miniconda : https://www.anaconda.com/download. prefer Miniconda, “lighter” version takes far less disk space full Anaoconda version (also include common packages). Next, create new environment OpenSim conda package installed. best use informative names, “opensim_scripting_45_311” indicating OpenSim v4.5 python version 3.11. Alternatively (preferred), can create environment opening anaconda navigator create new environment called “opensim_scripting_45_311” python version 3.11. method preferred found , order OpenSim package install work, need downgrade OpenSSL package 1.1.1w (easily achieved anaconda navigator). Open conda prompt, enter code activate new environment, install opensim package (latest version, indicated : https://anaconda.org/opensim-org/opensim). switch python interpreter test installation, typing . errors, ready roll. , might well install additional python packages might need follows. Next, open R Studio ensure reticulate package setup work new environment. easiest way found follows:","code":"conda create -n \"opensim_scripting_45_311\" python=3.11 conda activate opensim_scripting_45_311 conda install opensim-org::opensim python import opensim as osim python import opensim as osim exit() #to leave the python interpretor conda install -c conda-forge btk #btk has numerous tools for working with c3d files pip install scipy #for signal processing  pip install pandas #for data management pip install spm1d #statistical parametric mapping library(reticulate) #you should have installed this package already Sys.setenv(RETICULATE_PYTHON = \"C:/Users/nimaniar/.conda/envs/opensim_scripting_45_311\") #change file path as needed py_discover_config() #check to see if reading correct version of python, should be 3.11 osim = import(\"opensim\")"},{"path":"/articles/setting-up.html","id":"other-r-packages","dir":"Articles","previous_headings":"","what":"Other r packages","title":"Setting up for biomechanical analysis","text":"plenty R packages worth installing. basics: Note pracma signal already dependencies biomechanics package.","code":"install.packages(   c(\"tidyverse\", #you probably know why     \"readxl\" #read excel files     \"pracma\", #maths stuff     \"signal\", #for signal processing     \"caroline\", #some useful utility functions     \"fda\", #functional data analysis     )   )"},{"path":"/articles/setting-up.html","id":"other-recommended-installs","dir":"Articles","previous_headings":"","what":"Other recommended installs","title":"Setting up for biomechanical analysis","text":"’d also recommend following installs make life easier: OpenSim GUI - Graphical user interface OpenSim (musculoskeletal modelling software) https://simtk.org/projects/opensim Notepad ++ - text editor useful opening .xml files https://notepad-plus-plus.org/ Mokka - Motion capture data visualiser https://biomechanical-toolkit.github.io/mokka/","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dr Nirav Maniar. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Maniar DN (2025). biomechanics: Biomechanics Data Analysis. R package version 0.1.0, https://github.com/Kneerav/biomechanics.","code":"@Manual{,   title = {biomechanics: Biomechanics Data Analysis},   author = {Dr Nirav Maniar},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/Kneerav/biomechanics}, }"},{"path":"/index.html","id":"basic-installation","dir":"","previous_headings":"","what":"Basic installation","title":"Biomechanics Data Analysis","text":"Basic installation can done via install_github() function remotes package. installed, can load library use various functions. Full documentation vignettes hosted : https://kneerav.github.io/biomechanics/index.html","code":"#install the package remotes::install_github(\"Kneerav/biomechanics\") library(biomechanics)"},{"path":"/index.html","id":"full-functionality","dir":"","previous_headings":"","what":"Full functionality","title":"Biomechanics Data Analysis","text":"functions use OpenSim api (https://simtk.org/projects/opensim). enable , need setup appropriate python environment, install opensim conda package, use reticulate package access R. Please see setting vignette(https://kneerav.github.io/biomechanics/articles/setting-.html) information .","code":""},{"path":"/reference/adjust_reserve_actuators_osim.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust Reserve Actuators to Align with Pelvis Center of Mass — adjust_reserve_actuators_osim","title":"Adjust Reserve Actuators to Align with Pelvis Center of Mass — adjust_reserve_actuators_osim","text":"function modifies point location first three reserve actuators OpenSim force set file act center mass pelvis body.","code":""},{"path":"/reference/adjust_reserve_actuators_osim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust Reserve Actuators to Align with Pelvis Center of Mass — adjust_reserve_actuators_osim","text":"","code":"adjust_reserve_actuators_osim(   model_file = \"Model_Scaled.osim\",   actuators_file = \"reserve_actuators.xml\",   write_file = FALSE,   return_object = TRUE )"},{"path":"/reference/adjust_reserve_actuators_osim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust Reserve Actuators to Align with Pelvis Center of Mass — adjust_reserve_actuators_osim","text":"model_file Character. Path OpenSim model file (`.osim`). Defaults `\"Model_Scaled.osim\"`. actuators_file Character. Path actuators XML file. Defaults `\"reserve_actuators.xml\"`. write_file Logical: TRUE, writes moment arm values file. Default FALSE. return_object Logical: TRUE, returns moment arm data data frame. Default TRUE.","code":""},{"path":"/reference/adjust_reserve_actuators_osim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust Reserve Actuators to Align with Pelvis Center of Mass — adjust_reserve_actuators_osim","text":"`return_object` TRUE, data frame containing computed moment arm values. Otherwise, nothing returned.","code":""},{"path":"/reference/analyse_angular_momentum_com.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse Angular Momentum for a Model — analyse_angular_momentum_com","title":"Analyse Angular Momentum for a Model — analyse_angular_momentum_com","text":"function computes segmental angular momentum centre mass body model based position velocity kinematics time, returning results saving file.","code":""},{"path":"/reference/analyse_angular_momentum_com.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyse Angular Momentum for a Model — analyse_angular_momentum_com","text":"","code":"analyse_angular_momentum_com(   model_file = \"Model_SCALED.osim\",   body_pos_df = pos_df,   body_vel_df = vel_df,   file_output = \"angular_momentum.sto\",   in_degrees = TRUE,   write_file = TRUE,   return_object = FALSE )"},{"path":"/reference/analyse_angular_momentum_com.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyse Angular Momentum for a Model — analyse_angular_momentum_com","text":"model_file string specifying model file (.osim format). body_pos_df data.frame containing body position data (usually read .sto format). body_vel_df data.frame containing body velocity data (usually read .sto format). file_output string specifying output file angular momentum results. in_degrees Logical; TRUE, input angles velocities assumed degrees. Defaults TRUE. write_file Logical; TRUE, function writes results file. Defaults TRUE. return_object Logical; TRUE, function returns computed angular momentum data frame.","code":""},{"path":"/reference/analyse_angular_momentum_com.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyse Angular Momentum for a Model — analyse_angular_momentum_com","text":"return_object = TRUE, data frame containing angular momentum values body time step.","code":""},{"path":"/reference/analyse_angular_momentum_com_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse Angular Momentum for a Model — analyse_angular_momentum_com_file","title":"Analyse Angular Momentum for a Model — analyse_angular_momentum_com_file","text":"function computes segmental angular momentum centre mass body model based position velocity kinematics time, returning results saving file.","code":""},{"path":"/reference/analyse_angular_momentum_com_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyse Angular Momentum for a Model — analyse_angular_momentum_com_file","text":"","code":"analyse_angular_momentum_com_file(   model_file = \"Model_SCALED.osim\",   body_pos_file = \"Model_scaled_BodyKinematics_pos_global.sto\",   body_vel_file = \"Model_scaled_BodyKinematics_vel_global.sto\",   file_output = \"angular_momentum.sto\",   in_degrees = TRUE,   write_file = TRUE,   return_object = FALSE )"},{"path":"/reference/analyse_angular_momentum_com_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyse Angular Momentum for a Model — analyse_angular_momentum_com_file","text":"model_file string specifying model file (.osim format). body_pos_file string specifying body position file (.sto format). body_vel_file string specifying body velocity file (.sto format). file_output string specifying output file angular momentum results. in_degrees Logical; TRUE, input angles velocities assumed degrees. Defaults TRUE. write_file Logical; TRUE, function writes results file. Defaults TRUE. return_object Logical; TRUE, function returns computed angular momentum data frame.","code":""},{"path":"/reference/analyse_angular_momentum_com_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyse Angular Momentum for a Model — analyse_angular_momentum_com_file","text":"return_object = TRUE, data frame containing angular momentum values body time step.","code":""},{"path":"/reference/analyse_frequency_content.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse Frequency Content of a Data Frame — analyse_frequency_content","title":"Analyse Frequency Content of a Data Frame — analyse_frequency_content","text":"Computes frequency spectrum numerical columns data frame using Fast Fourier Transform (via `seewave::spec()`).","code":""},{"path":"/reference/analyse_frequency_content.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyse Frequency Content of a Data Frame — analyse_frequency_content","text":"","code":"analyse_frequency_content(data, exclude_cols = c(1, 2), sample_rate = 200)"},{"path":"/reference/analyse_frequency_content.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyse Frequency Content of a Data Frame — analyse_frequency_content","text":"data data frame containing time-domain signal data. exclude_cols Integer vector indicating columns exclude analysis (e.g., time label columns). sample_rate Numeric. sampling rate signals Hz (default 200 Hz).","code":""},{"path":"/reference/analyse_frequency_content.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyse Frequency Content of a Data Frame — analyse_frequency_content","text":"data frame frequency content included column: Frequencies_kHz Frequencies kilohertz. Magnitude Magnitude frequency component. Frequencies Frequencies Hz. id Column name original data spectrum corresponds .","code":""},{"path":"/reference/analyse_joint_power.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse joint power — analyse_joint_power","title":"Analyse joint power — analyse_joint_power","text":"function computes joint power using inverse dynamics joint velocities OpenSim. function option sum components given joint limb (e.g., hip, knee) create new column joint (e.g., hip_r, hip_l).. default, summing excludes columns contain word \"beta\" (.e., couple patellofemoral joint).","code":""},{"path":"/reference/analyse_joint_power.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyse joint power — analyse_joint_power","text":"","code":"analyse_joint_power(   inverse_dynamics_df,   joint_vel_df,   file_out = \"joint_power.sto\",   in_degrees = TRUE,   sum_joints = c(\"hip\", \"arm\"),   sum_suffix = c(\"_l\", \"_r\"),   write_file = TRUE,   return_object = FALSE )"},{"path":"/reference/analyse_joint_power.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyse joint power — analyse_joint_power","text":"inverse_dynamics_df dataframe containing inverse dynamics data (e.g., \"inverse_dynamics.sto\" file). joint_vel_df dataframe containing joint velocities (e.g., \"Model_scaled_Kinematics_u.sto\" file). file_out string specifying output file path joint power results (e.g., \"joint_power.sto\"). in_degrees logical indicating whether input joint velocities degrees (default TRUE). TRUE, velocities converted radians. sum_joints character vector joints sum (e.g., c(\"hip\", \"arm\")). Default c(\"hip\", \"arm\"). sum_suffix character vector suffixes left right sides (e.g., c(\"_l\", \"_r\")). Default c(\"_l\", \"_r\"). write_file logical indicating whether write results file (default TRUE). return_object logical indicating whether return resulting data frame (default FALSE).","code":""},{"path":"/reference/analyse_joint_power.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyse joint power — analyse_joint_power","text":"return_object = TRUE, returns data frame computed joint power. write_file = TRUE, writes data file.","code":""},{"path":"/reference/analyse_joint_power_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse joint power — analyse_joint_power_file","title":"Analyse joint power — analyse_joint_power_file","text":"function computes joint power using inverse dynamics joint velocities OpenSim. function option sum components given joint limb (e.g., hip, knee) create new column joint (e.g., hip_r, hip_l).. default, summing excludes columns contain word \"beta\" (.e., couple patellofemoral joint).","code":""},{"path":"/reference/analyse_joint_power_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyse joint power — analyse_joint_power_file","text":"","code":"analyse_joint_power_file(   inverse_dynamics_file = \"inverse_dynamics.sto\",   joint_vel_file = \"Model_scaled_Kinematics_u.sto\",   file_out = \"joint_power.sto\",   in_degrees = TRUE,   sum_joints = c(\"hip\", \"arm\"),   sum_suffix = c(\"_l\", \"_r\"),   write_file = TRUE,   return_object = FALSE )"},{"path":"/reference/analyse_joint_power_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyse joint power — analyse_joint_power_file","text":"inverse_dynamics_file string specifying file path inverse dynamics data (e.g., \"inverse_dynamics.sto\"). joint_vel_file string specifying file path joint velocities (e.g., \"Model_scaled_Kinematics_u.sto\"). file_out string specifying output file path joint power results (e.g., \"joint_power.sto\"). in_degrees logical indicating whether input joint velocities degrees (default TRUE). TRUE, velocities converted radians. sum_joints character vector joints sum (e.g., c(\"hip\", \"arm\")). Default c(\"hip\", \"arm\"). sum_suffix character vector suffixes left right sides (e.g., c(\"_l\", \"_r\")). Default c(\"_l\", \"_r\"). write_file logical indicating whether write results file (default TRUE). return_object logical indicating whether return resulting data frame (default FALSE).","code":""},{"path":"/reference/analyse_joint_power_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyse joint power — analyse_joint_power_file","text":"return_object = TRUE, returns data frame computed joint power. write_file = TRUE, writes data file.","code":""},{"path":"/reference/analyse_knee_compartment_forces.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze Knee Compartment Forces — analyse_knee_compartment_forces","title":"Analyze Knee Compartment Forces — analyse_knee_compartment_forces","text":"function calculates medial lateral forces knee based input force moment data. computes forces using provided force moment data applies Moore-Penrose pseudo-inverse solve forces medial lateral compartments.","code":""},{"path":"/reference/analyse_knee_compartment_forces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze Knee Compartment Forces — analyse_knee_compartment_forces","text":"","code":"analyse_knee_compartment_forces(   jr_data,   fx_col = \"walker_knee_r_on_tibia_r_in_tibia_r_fx\",   fy_col = \"walker_knee_r_on_tibia_r_in_tibia_r_fy\",   fz_col = \"walker_knee_r_on_tibia_r_in_tibia_r_fz\",   mx_col = \"walker_knee_r_on_tibia_r_in_tibia_r_mx\",   my_col = \"walker_knee_r_on_tibia_r_in_tibia_r_my\",   mz_col = \"walker_knee_r_on_tibia_r_in_tibia_r_mz\",   r_med = c(0, 0, -0.02),   r_lat = c(0, 0, 0.02),   fmed_name = \"fmed_r\",   flat_name = \"flat_r\",   append = TRUE )"},{"path":"/reference/analyse_knee_compartment_forces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze Knee Compartment Forces — analyse_knee_compartment_forces","text":"jr_data data frame containing joint reaction forces moments. fx_col Name column containing x-component force. fy_col Name column containing y-component force. fz_col Name column containing z-component force. mx_col Name column containing x-component moment. my_col Name column containing y-component moment. mz_col Name column containing z-component moment. r_med numeric vector length 3 representing medial vector (default `c(0,0,-0.02)`). r_lat numeric vector length 3 representing lateral vector (default `c(0,0, 0.02)`). fmed_name prefix columns naming medial forces (default `\"fmed_r\"`). flat_name prefix columns naming lateral forces (default `\"flat_r\"`). append Logical value indicating whether append calculated forces input data frame (`TRUE` default).","code":""},{"path":"/reference/analyse_knee_compartment_forces.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyze Knee Compartment Forces — analyse_knee_compartment_forces","text":"data frame containing original input data along calculated medial lateral forces (`append = TRUE`), just calculated forces (`append = FALSE`).","code":""},{"path":"/reference/analyse_muscle_moment.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Joint Moments from Muscle Forces and Moment Arms — analyse_muscle_moment","title":"Compute Joint Moments from Muscle Forces and Moment Arms — analyse_muscle_moment","text":"function multiplies muscle-tendon unit (MTU) forces corresponding moment arms compute net joint moments. can return data frame /write `.sto` file.","code":""},{"path":"/reference/analyse_muscle_moment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Joint Moments from Muscle Forces and Moment Arms — analyse_muscle_moment","text":"","code":"analyse_muscle_moment(   mtu_force_df,   moment_arm_df,   exclude_cols = 1,   file_output = \"moment.sto\",   write_file = TRUE,   return_object = FALSE )"},{"path":"/reference/analyse_muscle_moment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Joint Moments from Muscle Forces and Moment Arms — analyse_muscle_moment","text":"mtu_force_df data frame MTU forces (rows = time points, columns = muscles). columns match column names `moment_arm_df` used. moment_arm_df data frame moment arms (number rows `mtu_force_df`). exclude_cols vector column indices (names) `moment_arm_df` exclude processing, re-binded end. Default `1` remove time column. file_output Character. Output filename `.sto` file. Defaults `\"moment.sto\"`. write_file Logical. Whether write result `.sto` file. Defaults `TRUE`. return_object Logical. Whether return result data frame. Defaults `FALSE`.","code":""},{"path":"/reference/analyse_muscle_moment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Joint Moments from Muscle Forces and Moment Arms — analyse_muscle_moment","text":"`return_object = TRUE`, returns data frame joint moments. Otherwise, returns `NULL` invisibly.","code":""},{"path":"/reference/analyse_muscle_power.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse muscle power — analyse_muscle_power","title":"Analyse muscle power — analyse_muscle_power","text":"function computes muscle power product muscle force muscle lengthening velocity. includes option reverse velocity signal treat shortening positive (useful power generation interpretation).","code":""},{"path":"/reference/analyse_muscle_power.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyse muscle power — analyse_muscle_power","text":"","code":"analyse_muscle_power(   muscle_force_df,   muscle_velocity_df,   file_output = \"muscle_power.sto\",   reverse_velocity = FALSE,   write_file = TRUE,   return_object = FALSE )"},{"path":"/reference/analyse_muscle_power.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyse muscle power — analyse_muscle_power","text":"muscle_force_df dataframe containing muscle force data (e.g., \"muscle_forces.sto\" file). muscle_velocity_df dataframe containing muscle lengthening velocities (e.g., \"muscle_velocities.sto\" file). file_output string specifying output file path muscle power results (e.g., \"muscle_power.sto\"). reverse_velocity logical indicating whether reverse sign velocity (default FALSE). write_file logical indicating whether write results file (default TRUE). return_object logical indicating whether return resulting data frame (default FALSE).","code":""},{"path":"/reference/analyse_muscle_power.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyse muscle power — analyse_muscle_power","text":"return_object = TRUE, returns data frame computed muscle power. write_file = TRUE, writes data file.","code":""},{"path":"/reference/analyse_muscle_power_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse muscle power — analyse_muscle_power_file","title":"Analyse muscle power — analyse_muscle_power_file","text":"function computes muscle power product muscle force muscle lengthening velocity. includes option reverse velocity signal treat shortening positive (useful power generation interpretation).","code":""},{"path":"/reference/analyse_muscle_power_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyse muscle power — analyse_muscle_power_file","text":"","code":"analyse_muscle_power_file(   muscle_force_file = \"muscle_forces.sto\",   muscle_velocity_file = \"muscle_velocities.sto\",   file_output = \"muscle_power.sto\",   reverse_velocity = FALSE,   write_file = TRUE,   return_object = FALSE )"},{"path":"/reference/analyse_muscle_power_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyse muscle power — analyse_muscle_power_file","text":"muscle_force_file string specifying file path muscle force data (e.g., \"muscle_forces.sto\"). muscle_velocity_file string specifying file path muscle lengthening velocities (e.g., \"muscle_velocities.sto\"). file_output string specifying output file path muscle power results (e.g., \"muscle_power.sto\"). reverse_velocity logical indicating whether reverse sign velocity (default FALSE). write_file logical indicating whether write results file (default TRUE). return_object logical indicating whether return resulting data frame (default FALSE).","code":""},{"path":"/reference/analyse_muscle_power_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyse muscle power — analyse_muscle_power_file","text":"return_object = TRUE, returns data frame computed muscle power. write_file = TRUE, writes data file.","code":""},{"path":"/reference/append_local_marker.html","id":null,"dir":"Reference","previous_headings":"","what":"Append a Marker Defined in a Local Coordinate System to Global Data — append_local_marker","title":"Append a Marker Defined in a Local Coordinate System to Global Data — append_local_marker","text":"Transforms marker defined local reference frame (defined 3 markers) global coordinate system row dataset, appends data.","code":""},{"path":"/reference/append_local_marker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append a Marker Defined in a Local Coordinate System to Global Data — append_local_marker","text":"","code":"append_local_marker(   data,   marker_local,   frame_markers,   local_marker_name,   append = TRUE )"},{"path":"/reference/append_local_marker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append a Marker Defined in a Local Coordinate System to Global Data — append_local_marker","text":"data data frame marker data, columns named format `marker_X`, `marker_Y`, `marker_Z`. marker_local numeric vector length 3 representing local coordinates (X, Y, Z) marker. frame_markers character vector 3 marker names define local coordinate system. second marker used origin. local_marker_name string giving name local marker added. append Logical. `TRUE` (default), appends marker original data. `FALSE`, returns transformed marker positions.","code":""},{"path":"/reference/append_local_marker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append a Marker Defined in a Local Coordinate System to Global Data — append_local_marker","text":"data frame. `append = TRUE`, returns original `data` new marker columns appended. `FALSE`, returns data frame just transformed marker.","code":""},{"path":"/reference/compute_cutoff_correction.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Corrected Cutoff Frequency for Filter — compute_cutoff_correction","title":"Compute Corrected Cutoff Frequency for Filter — compute_cutoff_correction","text":"function computes corrected cutoff frequency lowpass highpass filter using correction factor David . Winter. highpass filters, Robertson's high-pass modification applied.","code":""},{"path":"/reference/compute_cutoff_correction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Corrected Cutoff Frequency for Filter — compute_cutoff_correction","text":"","code":"compute_cutoff_correction(   filter_passes = 2,   cutoff_frequency = 20,   sampling_frequency = 200,   type = \"lowpass\" )"},{"path":"/reference/compute_cutoff_correction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Corrected Cutoff Frequency for Filter — compute_cutoff_correction","text":"filter_passes Integer. number passes filter. Default 2. cutoff_frequency Numeric. cutoff frequency Hz. Default 6 lowpass. sampling_frequency Numeric. sampling frequency Hz. Default 200. type Character. type filter. Must either \"lowpass\" \"highpass\". Default \"lowpass\".","code":""},{"path":"/reference/compute_cutoff_correction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Corrected Cutoff Frequency for Filter — compute_cutoff_correction","text":"Numeric. corrected cutoff frequency Hz.","code":""},{"path":"/reference/compute_cutoff_correction_highpass.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Corrected Cutoff Frequency for Highpass Filter — compute_cutoff_correction_highpass","title":"Compute Corrected Cutoff Frequency for Highpass Filter — compute_cutoff_correction_highpass","text":"function computes corrected cutoff frequency highpass filter using correction factor David . Winter Robertson's high-pass modification.","code":""},{"path":"/reference/compute_cutoff_correction_highpass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Corrected Cutoff Frequency for Highpass Filter — compute_cutoff_correction_highpass","text":"","code":"compute_cutoff_correction_highpass(   filter_passes = 2,   cutoff_frequency = 20,   sampling_frequency = 200 )"},{"path":"/reference/compute_cutoff_correction_highpass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Corrected Cutoff Frequency for Highpass Filter — compute_cutoff_correction_highpass","text":"filter_passes Integer. number passes filter. Default 2. cutoff_frequency Numeric. cutoff frequency Hz. Default 20. sampling_frequency Numeric. sampling frequency Hz. Default 200.","code":""},{"path":"/reference/compute_cutoff_correction_highpass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Corrected Cutoff Frequency for Highpass Filter — compute_cutoff_correction_highpass","text":"Numeric. corrected cutoff frequency Hz.","code":""},{"path":"/reference/compute_cutoff_correction_lowpass.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Corrected Cutoff Frequency for Lowpass Filter — compute_cutoff_correction_lowpass","title":"Compute Corrected Cutoff Frequency for Lowpass Filter — compute_cutoff_correction_lowpass","text":"function computes corrected cutoff frequency lowpass filter using correction factor David . Winter.","code":""},{"path":"/reference/compute_cutoff_correction_lowpass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Corrected Cutoff Frequency for Lowpass Filter — compute_cutoff_correction_lowpass","text":"","code":"compute_cutoff_correction_lowpass(   filter_passes = 2,   cutoff_frequency = 6,   sampling_frequency = 200 )"},{"path":"/reference/compute_cutoff_correction_lowpass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Corrected Cutoff Frequency for Lowpass Filter — compute_cutoff_correction_lowpass","text":"filter_passes Integer. number passes filter. Default 2. cutoff_frequency Numeric. cutoff frequency Hz. Default 6. sampling_frequency Numeric. sampling frequency Hz. Default 200.","code":""},{"path":"/reference/compute_cutoff_correction_lowpass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Corrected Cutoff Frequency for Lowpass Filter — compute_cutoff_correction_lowpass","text":"Numeric. corrected cutoff frequency Hz.","code":""},{"path":"/reference/compute_derivative.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Derivative of Data — compute_derivative","title":"Compute Derivative of Data — compute_derivative","text":"function computes derivative data (e.g., angular position) using either smooth spline fit numerical gradient.","code":""},{"path":"/reference/compute_derivative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Derivative of Data — compute_derivative","text":"","code":"compute_derivative(x, y, method = c(\"spline\", \"gradient\"), deriv = 1)"},{"path":"/reference/compute_derivative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Derivative of Data — compute_derivative","text":"x numeric vector representing independent variable (e.g., time). y numeric vector representing dependent variable (e.g., angular position). method character string specifying method compute derivative. Options \"spline\" smooth spline fitting \"gradient\" numerical gradient using pracma::gradient. Default \"spline\". deriv integer specifying order derivative. Default 1 first derivative. Higher values (e.g., 2) return higher derivatives (second derivative, etc.).","code":""},{"path":"/reference/compute_derivative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Derivative of Data — compute_derivative","text":"numeric vector representing derivative (e.g., angular velocity acceleration).","code":""},{"path":"/reference/compute_derivative_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Derivatives for Each Column in Data Frame — compute_derivative_df","title":"Compute Derivatives for Each Column in Data Frame — compute_derivative_df","text":"function computes angular velocity (first derivative angular position) column data data frame, based specified time column. derivative can computed using either smooth spline fit numerical gradient.","code":""},{"path":"/reference/compute_derivative_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Derivatives for Each Column in Data Frame — compute_derivative_df","text":"","code":"compute_derivative_df(   data,   time_col = 1,   method = c(\"spline\", \"gradient\"),   deriv = 1 )"},{"path":"/reference/compute_derivative_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Derivatives for Each Column in Data Frame — compute_derivative_df","text":"data data frame first column time values columns represent data (e.g., angular positions). time_col character numeric value specifying time column. numeric, represents column position. character, represents column name. method character string specifying method compute derivative. Options \"spline\" smooth spline fitting \"gradient\" numerical gradient using pracma::gradient. Default \"spline\". deriv integer specifying order derivative. Default 1 first derivative. Higher values (e.g., 2) return higher derivatives (second derivative, etc.).","code":""},{"path":"/reference/compute_derivative_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Derivatives for Each Column in Data Frame — compute_derivative_df","text":"data frame structure input, columns angular velocities (higher derivatives).","code":""},{"path":"/reference/compute_derivative_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Derivatives for Each Column in Data Frame — compute_derivative_df","text":"","code":"# Example data frame data <- data.frame(time = seq(0, 10, by = 0.1),                    position1 = sin(seq(0, 10, by = 0.1)),                    position2 = cos(seq(0, 10, by = 0.1)))  # Compute derivatives using spline method (time column by name) angular_velocities_spline <- compute_derivative_dataframe(data, time_col = \"time\", method = \"spline\", deriv = 1) #> Error in compute_derivative_dataframe(data, time_col = \"time\", method = \"spline\",     deriv = 1): could not find function \"compute_derivative_dataframe\"  # Compute derivatives using gradient method (time column by position) angular_velocities_gradient <- compute_derivative_dataframe(data, time_col = 1, method = \"gradient\", deriv = 1) #> Error in compute_derivative_dataframe(data, time_col = 1, method = \"gradient\",     deriv = 1): could not find function \"compute_derivative_dataframe\""},{"path":"/reference/compute_frame_generic.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a Reference Frame from Three Non-Colinear Markers — compute_frame_generic","title":"Compute a Reference Frame from Three Non-Colinear Markers — compute_frame_generic","text":"Constructs 4x4 transformation matrix representing reference frame defined three non-colinear 3D points. frame based : - Origin: marker_2 - X-axis: marker_2 marker_3 - Y-axis: marker_2 marker_1 - Z-axis: orthogonal XY-plane (via cross product) Note x re-computed via cross product y z make frame orthogonal","code":""},{"path":"/reference/compute_frame_generic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a Reference Frame from Three Non-Colinear Markers — compute_frame_generic","text":"","code":"compute_frame_generic(marker_1, marker_2, marker_3)"},{"path":"/reference/compute_frame_generic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a Reference Frame from Three Non-Colinear Markers — compute_frame_generic","text":"marker_1 numeric vector length 3, representing 3D point. marker_2 numeric vector length 3, representing 3D point (used origin). marker_3 numeric vector length 3, representing 3D point.","code":""},{"path":"/reference/compute_frame_generic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a Reference Frame from Three Non-Colinear Markers — compute_frame_generic","text":"4x4 numeric matrix representing homogeneous transformation matrix.","code":""},{"path":"/reference/compute_frame_generic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a Reference Frame from Three Non-Colinear Markers — compute_frame_generic","text":"","code":"compute_frame_generic(c(1, 0, 0), c(0, 0, 0), c(0, 1, 0)) #>      x_orth y  z o #> [1,]      0 1  0 0 #> [2,]      1 0  0 0 #> [3,]      0 0 -1 0 #> [4,]      0 0  0 1"},{"path":"/reference/compute_frame_orientation.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Frame Orientation — compute_frame_orientation","title":"Compute Frame Orientation — compute_frame_orientation","text":"function computes frame orientation based two input vectors.","code":""},{"path":"/reference/compute_frame_orientation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Frame Orientation — compute_frame_orientation","text":"","code":"compute_frame_orientation(v1, v2, recompute, frameorder)"},{"path":"/reference/compute_frame_orientation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Frame Orientation — compute_frame_orientation","text":"v1 numeric matrix data frame row represents vector. v2 numeric matrix data frame row represents vector. recompute integer indicating whether recompute orientation: 1: Recompute u1 cross product u2 u3. 2: Recompute u2 cross product u3 u1. frameorder numeric vector length 3 specifying order frames.","code":""},{"path":"/reference/compute_frame_orientation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Frame Orientation — compute_frame_orientation","text":"3-dimensional array slice corresponds 3x3 orientation matrix.","code":""},{"path":"/reference/compute_frame_orientation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Frame Orientation — compute_frame_orientation","text":"","code":"v1 <- matrix(c(1, 0, 0, 0, 1, 0, 0, 0, 1), nrow = 3, byrow = TRUE) v2 <- matrix(c(0, 1, 0, 0, 0, 1, 1, 0, 0), nrow = 3, byrow = TRUE) recompute <- 1 frameorder <- c(1, 2, 3) compute_frame_orientation(v1, v2, recompute, frameorder) #> Loading required package: pracma #> , , 1 #>  #>      [,1] [,2] [,3] #> [1,]    1    0    0 #> [2,]    0    1    0 #> [3,]    0    0    1 #>  #> , , 2 #>  #>      [,1] [,2] [,3] #> [1,]    0    1    0 #> [2,]    0    0    1 #> [3,]    1    0    0 #>  #> , , 3 #>  #>      [,1] [,2] [,3] #> [1,]    0    0    1 #> [2,]    1    0    0 #> [3,]    0    1    0 #>"},{"path":"/reference/compute_hjc_regression.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Hip Joint Center using Harrington's of Bell and Brand's Method — compute_hjc_regression","title":"Compute Hip Joint Center using Harrington's of Bell and Brand's Method — compute_hjc_regression","text":"function computes right left hip joint centers based Harrington's formula.","code":""},{"path":"/reference/compute_hjc_regression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Hip Joint Center using Harrington's of Bell and Brand's Method — compute_hjc_regression","text":"","code":"compute_hjc_regression(   data,   LASIS_name = \"L.ASIS\",   RASIS_name = \"R.ASIS\",   LPSIS_name = \"L.PSIS\",   RPSIS_name = \"R.PSIS\",   RHJC_name = \"R.HJC\",   LHJC_name = \"L.HJC\",   method = \"harrington\",   append = TRUE )"},{"path":"/reference/compute_hjc_regression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Hip Joint Center using Harrington's of Bell and Brand's Method — compute_hjc_regression","text":"data data frame containing marker trajectories columns corresponding names specified `LASIS_name`, `RASIS_name`, `LPSIS_name`, `RPSIS_name` parameters. LASIS_name string specifying column name pattern left anterior superior iliac spine markers data. RASIS_name string specifying column name pattern right anterior superior iliac spine markers data. LPSIS_name string specifying column name pattern left posterior superior iliac spine markers data. RPSIS_name string specifying column name pattern right posterior superior iliac spine markers data. RHJC_name string specifying prefix right hip joint center column names output. LHJC_name string specifying prefix left hip joint center column names output. method string specifying method use calculations. Options \"harrington\" \"bell\". Default \"harrington\". append Logical. TRUE, appends computed hip joint center columns original data frame. FALSE, returns list containing computed hip joint center data frames.","code":""},{"path":"/reference/compute_hjc_regression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Hip Joint Center using Harrington's of Bell and Brand's Method — compute_hjc_regression","text":"data frame appended hip joint center columns list two data frames   containing right left hip joint centers.","code":""},{"path":"/reference/compute_hjc_regression.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute Hip Joint Center using Harrington's of Bell and Brand's Method — compute_hjc_regression","text":"Bell AL, Pederson DR, Brand RA (1989) Prediction hip joint center location external landmarks. Human Movement Science. 8:3-16: Bell AL, Pedersen DR, Brand RA (1990) Comparison Accuracy Several hip Center Location Prediction Methods. J Biomech. 23, 617-621. Harrington , Zavatsky AB, Lawson SE, Yuan Z, Theologis TN.(2007) Prediction hip joint centre adults, children, patients cerebral palsy based magnetic resonance imaging. J Biomech. 2007;40(3):595-602. Epub 2006 Apr 3.","code":""},{"path":"/reference/compute_impulse.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Area Under the Curve (AUC) Using Trapezoidal Integration — compute_impulse","title":"Compute Area Under the Curve (AUC) Using Trapezoidal Integration — compute_impulse","text":"function calculates area curve (AUC) using trapezoidal rule `pracma` package. also supports computing positive AUC (sum areas x-axis) negative AUC (sum areas x-axis).","code":""},{"path":"/reference/compute_impulse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Area Under the Curve (AUC) Using Trapezoidal Integration — compute_impulse","text":"","code":"compute_impulse(time, variable, type = \"total\")"},{"path":"/reference/compute_impulse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Area Under the Curve (AUC) Using Trapezoidal Integration — compute_impulse","text":"time numeric vector representing x-coordinates data points, typically time seconds. variable numeric vector representing y-coordinates data points, typically kinetic quantity like force moment. type character string specifying type AUC compute. Options \"total\", \"positive\", \"negative\". Default \"total\".","code":""},{"path":"/reference/compute_impulse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Area Under the Curve (AUC) Using Trapezoidal Integration — compute_impulse","text":"numeric value representing computed AUC based specified type.","code":""},{"path":"/reference/compute_impulse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Area Under the Curve (AUC) Using Trapezoidal Integration — compute_impulse","text":"","code":"# Example time and variable data time <- c(1, 2, 3, 4, 5) variable <- c(-2, 3, 5, -7, 6) # Compute total AUC auc_total <- compute_impulse(time, variable, type = \"total\") print(auc_total) #> [1] 3 # Compute positive AUC auc_positive <- compute_impulse(time, variable, type = \"positive\") print(auc_positive) #> [1] 11 # Compute negative AUC auc_negative <- compute_impulse(time, variable, type = \"negative\") print(auc_negative) #> [1] -8"},{"path":"/reference/compute_jc_mid.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Euclidean Average of Two 3D Vectors — compute_jc_mid","title":"Compute Euclidean Average of Two 3D Vectors — compute_jc_mid","text":"function computes Euclidean average two 3D vectors row data frame, commonly used find joint centre (e.g., knee, ankle, etc.).","code":""},{"path":"/reference/compute_jc_mid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Euclidean Average of Two 3D Vectors — compute_jc_mid","text":"","code":"compute_jc_mid(   data,   marker_name_1,   marker_name_2,   jc_name = \"jc\",   append = TRUE )"},{"path":"/reference/compute_jc_mid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Euclidean Average of Two 3D Vectors — compute_jc_mid","text":"data data frame containing columns 3D vectors. marker_name_1 string specifying column name pattern first 3D vector data frame. marker_name_2 string specifying column name pattern second 3D vector data frame. jc_name string specifying prefix average vector (joint centre) column names output. append Logical. TRUE, appends computed average vector new columns original data frame.","code":""},{"path":"/reference/compute_jc_mid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Euclidean Average of Two 3D Vectors — compute_jc_mid","text":"data frame computed average vector either appended original data frame    separate data frame depending `append` argument.","code":""},{"path":"/reference/compute_jc_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Joint Centre Using the SCoRE Method — compute_jc_score","title":"Compute Joint Centre Using the SCoRE Method — compute_jc_score","text":"Computes joint centre using Symmetrical Centre Rotation Estimation (SCoRE) method based time series marker positions proximal distal segments.","code":""},{"path":"/reference/compute_jc_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Joint Centre Using the SCoRE Method — compute_jc_score","text":"","code":"compute_jc_score(   data,   marker_names_prox,   marker_names_dist,   joint_centre_name,   return_items = c(\"all\", \"local_distal\", \"local_proximal\", \"global\", \"appended\") )"},{"path":"/reference/compute_jc_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Joint Centre Using the SCoRE Method — compute_jc_score","text":"data data frame time-series marker data. Columns must named format `marker_X`, `marker_Y`, `marker_Z`. marker_names_prox character vector 3 marker names defining proximal segment. marker_names_dist character vector 3 marker names defining distal segment. joint_centre_name character string used name resulting joint centre columns. return_items Character string specifying return. One `\"\"`, `\"local_distal\"`, `\"local_proximal\"`, `\"global\"`, `\"appended\"`.","code":""},{"path":"/reference/compute_jc_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Joint Centre Using the SCoRE Method — compute_jc_score","text":"Depending `return_items`: * `\"\"` – list full data frame, local distal, local proximal coordinates. * `\"local_distal\"` `\"local_proximal\"` – 3x1 numeric matrix. * `\"global\"` – data frame joint centre coordinates global frame. * `\"appended\"` – original data global joint centre columns appended.","code":""},{"path":"/reference/compute_jc_score.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute Joint Centre Using the SCoRE Method — compute_jc_score","text":"Ehrig RM, Taylor WR, Duda GN, Heller MO (2006). survey formal methods determining centre rotation joints. Journal Biomechanics, 39(15):2798–2809.","code":""},{"path":"/reference/compute_joint_angles.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Joint Angles from Rotation Frames — compute_joint_angles","title":"Compute Joint Angles from Rotation Frames — compute_joint_angles","text":"function computes Euler angles series 3x3 rotation matrices.","code":""},{"path":"/reference/compute_joint_angles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Joint Angles from Rotation Frames — compute_joint_angles","text":"","code":"compute_joint_angles(rotation_frames)"},{"path":"/reference/compute_joint_angles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Joint Angles from Rotation Frames — compute_joint_angles","text":"rotation_frames 3-dimensional array size 3x3xN, 3x3 slice represents rotation matrix.","code":""},{"path":"/reference/compute_joint_angles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Joint Angles from Rotation Frames — compute_joint_angles","text":"matrix size N x 3, row contains Euler angles (degrees) corresponding 3x3 rotation matrix.","code":""},{"path":"/reference/compute_moment_arm_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Moment Arm Curve for a Muscle-Coordinate Pair in an OpenSim Model — compute_moment_arm_curve","title":"Compute Moment Arm Curve for a Muscle-Coordinate Pair in an OpenSim Model — compute_moment_arm_curve","text":"function computes moment arm curve specified muscle coordinate OpenSim model, iterating coordinate's range. moment arm calculated increments specified angle can written file returned data frame.","code":""},{"path":"/reference/compute_moment_arm_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Moment Arm Curve for a Muscle-Coordinate Pair in an OpenSim Model — compute_moment_arm_curve","text":"","code":"compute_moment_arm_curve(   model_input_file = \"../TestData/Model_SCALED.osim\",   coordinate = \"knee_angle_r\",   muscle = \"vasmed_r\",   file_output = \"vasmed_r_knee_angle_r_moment_arm.sto\",   deg_increment = 10,   write_file = FALSE,   return_object = TRUE )"},{"path":"/reference/compute_moment_arm_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Moment Arm Curve for a Muscle-Coordinate Pair in an OpenSim Model — compute_moment_arm_curve","text":"model_input_file string representing path OpenSim model file. Default \"../TestData/Model_SCALED.osim\". coordinate string indicating name coordinate interest. Default \"knee_angle_r\". muscle string indicating name muscle interest. Default \"vasmed_r\". file_output string representing file path write moment arm data. Default \"vasmed_r_knee_angle_r_moment_arm.sto\". deg_increment angular increment (degrees) moment arm computed. Default 10. write_file Logical: TRUE, writes moment arm values file. Default FALSE. return_object Logical: TRUE, returns moment arm data data frame. Default TRUE.","code":""},{"path":"/reference/compute_moment_arm_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Moment Arm Curve for a Muscle-Coordinate Pair in an OpenSim Model — compute_moment_arm_curve","text":"`return_object` TRUE, data frame containing computed moment arm values. Otherwise, nothing returned.","code":""},{"path":"/reference/compute_muscle_length_anatomical.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Anatomical Muscle Lengths from an OpenSim Model — compute_muscle_length_anatomical","title":"Compute Anatomical Muscle Lengths from an OpenSim Model — compute_muscle_length_anatomical","text":"Extracts muscle-tendon unit (MTU) lengths static OpenSim model anatomical (neutral) posture.","code":""},{"path":"/reference/compute_muscle_length_anatomical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Anatomical Muscle Lengths from an OpenSim Model — compute_muscle_length_anatomical","text":"","code":"compute_muscle_length_anatomical(   model_file = \"../TestData/Model_SCALED.osim\",   file_output = \"muscle_length_anatomical.sto\",   write_file = FALSE,   return_object = TRUE )"},{"path":"/reference/compute_muscle_length_anatomical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Anatomical Muscle Lengths from an OpenSim Model — compute_muscle_length_anatomical","text":"model_file Path `.osim` model file (OpenSim 4.x format). file_output Name output file write muscle lengths (optional). write_file Logical. `TRUE`, writes output `.sto` file. return_object Logical. `TRUE`, returns data frame muscle lengths.","code":""},{"path":"/reference/compute_muscle_length_anatomical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Anatomical Muscle Lengths from an OpenSim Model — compute_muscle_length_anatomical","text":"`return_object = TRUE`, returns data frame muscle lengths time = 0.         Otherwise, returns invisibly.","code":""},{"path":"/reference/compute_muscle_moment.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Joint Moments from Muscle Forces and Moment Arms — compute_muscle_moment","title":"Compute Joint Moments from Muscle Forces and Moment Arms — compute_muscle_moment","text":"function multiplies muscle-tendon unit (MTU) forces corresponding moment arms compute net joint moments. can return data frame /write `.sto` file.","code":""},{"path":"/reference/compute_muscle_moment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Joint Moments from Muscle Forces and Moment Arms — compute_muscle_moment","text":"","code":"compute_muscle_moment(   mtu_force_df,   moment_arm_df,   file_output = \"moment.sto\",   write_file = TRUE,   return_object = FALSE )"},{"path":"/reference/compute_muscle_moment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Joint Moments from Muscle Forces and Moment Arms — compute_muscle_moment","text":"mtu_force_df data frame MTU forces (rows = time points, columns = muscles). moment_arm_df data frame moment arms (dimensions `mtu_force_df`). file_output Character. Output filename `.sto` file. Defaults `\"moment.sto\"`. write_file Logical. Whether write result `.sto` file. Defaults `TRUE`. return_object Logical. Whether return result data frame. Defaults `FALSE`.","code":""},{"path":"/reference/compute_muscle_moment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Joint Moments from Muscle Forces and Moment Arms — compute_muscle_moment","text":"`return_object = TRUE`, returns data frame joint moments. Otherwise, returns `NULL` invisibly.","code":""},{"path":"/reference/compute_muscle_volume_scale_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Strength Scale Factor Based on Height and Mass — compute_muscle_volume_scale_factor","title":"Calculate Strength Scale Factor Based on Height and Mass — compute_muscle_volume_scale_factor","text":"function computes muscle volume scale factor based individual's height  mass relative reference values Rajagopal et al. (2016) using regression equations Handsfield et al.","code":""},{"path":"/reference/compute_muscle_volume_scale_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Strength Scale Factor Based on Height and Mass — compute_muscle_volume_scale_factor","text":"","code":"compute_muscle_volume_scale_factor(   height,   mass,   height_ref = 1.68,   mass_ref = 75.337 )"},{"path":"/reference/compute_muscle_volume_scale_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Strength Scale Factor Based on Height and Mass — compute_muscle_volume_scale_factor","text":"height numeric value representing height individual meters. mass numeric value representing mass individual kilograms. height_ref numeric value reference height meters (default 1.68). mass_ref numeric value reference mass kilograms (default 75.337).","code":""},{"path":"/reference/compute_muscle_volume_scale_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Strength Scale Factor Based on Height and Mass — compute_muscle_volume_scale_factor","text":"numeric value representing calculated strength scale factor.","code":""},{"path":"/reference/compute_rmse.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Root Mean Square Error (RMSE) with Normalization Options (untested) — compute_rmse","title":"Compute Root Mean Square Error (RMSE) with Normalization Options (untested) — compute_rmse","text":"function calculates Root Mean Square Error (RMSE) two numeric vectors (signals) offers options normalizing RMSE.","code":""},{"path":"/reference/compute_rmse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Root Mean Square Error (RMSE) with Normalization Options (untested) — compute_rmse","text":"","code":"compute_rmse(observed, predicted, normalise = \"none\")"},{"path":"/reference/compute_rmse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Root Mean Square Error (RMSE) with Normalization Options (untested) — compute_rmse","text":"observed numeric vector observed values (true values). predicted numeric vector predicted values (model values). normalise character string specifying normalization method. Options \"none\", \"max\", \"min\", \"range\", \"median\", \"mean\" \"sd\". Default \"none\".","code":""},{"path":"/reference/compute_rmse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Root Mean Square Error (RMSE) with Normalization Options (untested) — compute_rmse","text":"numeric value representing normalised RMSE observed predicted values.","code":""},{"path":"/reference/compute_rmse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Root Mean Square Error (RMSE) with Normalization Options (untested) — compute_rmse","text":"","code":"# Example observed and predicted signals observed <- c(1.0, 2.0, 3.0, 4.0, 5.0) predicted <- c(1.1, 2.1, 2.9, 4.2, 5.0) # Compute RMSE without normalization rmse_no_norm <- compute_rmse(observed, predicted, normalise = \"none\") print(rmse_no_norm) #> [1] 0.1183216 # Compute RMSE normalised by the max value of the observed signal rmse_max <- compute_rmse(observed, predicted, normalise = \"max\") print(rmse_max) #> [1] 0.02366432"},{"path":"/reference/compute_rotation_between_frames.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Rotation Between Frames — compute_rotation_between_frames","title":"Compute Rotation Between Frames — compute_rotation_between_frames","text":"function calculates rotation matrix corresponding frames two 3D arrays.","code":""},{"path":"/reference/compute_rotation_between_frames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Rotation Between Frames — compute_rotation_between_frames","text":"","code":"compute_rotation_between_frames(parent, child)"},{"path":"/reference/compute_rotation_between_frames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Rotation Between Frames — compute_rotation_between_frames","text":"parent 3-dimensional array slice represents frame rotation matrices. child 3-dimensional array dimensions `parent`, representing another set rotation matrices.","code":""},{"path":"/reference/compute_rotation_between_frames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Rotation Between Frames — compute_rotation_between_frames","text":"3-dimensional array dimensions `parent` `child`, slice represents rotation matrix corresponding frames.","code":""},{"path":"/reference/compute_strain.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Muscle-Tendon Unit (MTU) Strain — compute_strain","title":"Compute Muscle-Tendon Unit (MTU) Strain — compute_strain","text":"Computes strain (decimal) dynamic reference muscle length data using: $$strain = (dynamic length - reference length) / reference length$$","code":""},{"path":"/reference/compute_strain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Muscle-Tendon Unit (MTU) Strain — compute_strain","text":"","code":"compute_strain(   length_df_dynamic,   length_df_reference,   file_output = \"muscle_strain.sto\",   write_file = TRUE,   return_object = FALSE )"},{"path":"/reference/compute_strain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Muscle-Tendon Unit (MTU) Strain — compute_strain","text":"length_df_dynamic data frame containing dynamic muscle length data. Assumes first column \"time\". length_df_reference single-row data frame containing reference muscle lengths. Assumes first column \"time\". file_output Character string specifying output filename strain .sto file. write_file Logical. TRUE, writes strain output .sto file using biomechanics package. return_object Logical. TRUE, returns computed strain data frame.","code":""},{"path":"/reference/compute_strain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Muscle-Tendon Unit (MTU) Strain — compute_strain","text":"Either data frame (return_object = TRUE), invisibly returns NULL.","code":""},{"path":"/reference/compute_torque_com.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Torque at Center of Mass (COM) — compute_torque_com","title":"Compute Torque at Center of Mass (COM) — compute_torque_com","text":"function calculates torque center mass (COM) given position COM, ground reaction force (GRF), center pressure (COP). torque computed cross product vector COM COP GRF vector.Note positive means counterclockwise rotation given axis (axis pointing ).","code":""},{"path":"/reference/compute_torque_com.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Torque at Center of Mass (COM) — compute_torque_com","text":"","code":"compute_torque_com(com_pos_vec, grf_vec, cop_vec)"},{"path":"/reference/compute_torque_com.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Torque at Center of Mass (COM) — compute_torque_com","text":"com_pos_vec numeric vector length 3 representing position center mass (COM) 3D space (x, y, z). grf_vec numeric vector length 3 representing ground reaction force (GRF) 3D space (x, y, z). cop_vec numeric vector length 3 representing position center pressure (COP) 3D space (x, y, z).","code":""},{"path":"/reference/compute_torque_com.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Torque at Center of Mass (COM) — compute_torque_com","text":"numeric vector length 3 representing torque (tx, ty, tz) COM 3D space.","code":""},{"path":"/reference/compute_work.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Area Under the Curve (AUC) Using Trapezoidal Integration — compute_work","title":"Compute Area Under the Curve (AUC) Using Trapezoidal Integration — compute_work","text":"function calculates area curve (AUC) using trapezoidal rule `pracma` package. also supports computing positive AUC (sum areas x-axis) negative AUC (sum areas x-axis).","code":""},{"path":"/reference/compute_work.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Area Under the Curve (AUC) Using Trapezoidal Integration — compute_work","text":"","code":"compute_work(time, power, type = \"total\")"},{"path":"/reference/compute_work.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Area Under the Curve (AUC) Using Trapezoidal Integration — compute_work","text":"time numeric vector representing x-coordinates data points, typically time seconds. power numeric vector representing y-coordinates data points, typically power watts. type character string specifying type AUC compute. Options \"total\", \"positive\", \"negative\". Default \"total\".","code":""},{"path":"/reference/compute_work.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Area Under the Curve (AUC) Using Trapezoidal Integration — compute_work","text":"numeric value representing computed AUC based specified type.","code":""},{"path":"/reference/compute_work.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Area Under the Curve (AUC) Using Trapezoidal Integration — compute_work","text":"","code":"# Example time and power data time <- c(1, 2, 3, 4, 5) power <- c(-2, 3, 5, -7, 6) # Compute total AUC auc_total <- compute_work(time, power, type = \"total\") print(auc_total) #> [1] 3 # Compute positive AUC auc_positive <- compute_work(time, power, type = \"positive\") print(auc_positive) #> [1] 11 # Compute negative AUC auc_negative <- compute_work(time, power, type = \"negative\") print(auc_negative) #> [1] -8"},{"path":"/reference/create_cross_mat_from_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a Vector to a Cross Product Matrix — create_cross_mat_from_vector","title":"Convert a Vector to a Cross Product Matrix — create_cross_mat_from_vector","text":"Given 3D vector `r`, function computes corresponding cross product matrix.","code":""},{"path":"/reference/create_cross_mat_from_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a Vector to a Cross Product Matrix — create_cross_mat_from_vector","text":"","code":"create_cross_mat_from_vector(r)"},{"path":"/reference/create_cross_mat_from_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a Vector to a Cross Product Matrix — create_cross_mat_from_vector","text":"r numeric vector length 3, representing 3D vector.","code":""},{"path":"/reference/create_cross_mat_from_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a Vector to a Cross Product Matrix — create_cross_mat_from_vector","text":"3x3 numeric matrix representing cross product matrix input vector.","code":""},{"path":"/reference/create_rotation_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a 3D Rotation Matrix — create_rotation_matrix","title":"Create a 3D Rotation Matrix — create_rotation_matrix","text":"Generates 3x3 rotation matrix rotating points 3D space around x, y, z axis specified angle degrees.","code":""},{"path":"/reference/create_rotation_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a 3D Rotation Matrix — create_rotation_matrix","text":"","code":"create_rotation_matrix(angle_deg, axis)"},{"path":"/reference/create_rotation_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a 3D Rotation Matrix — create_rotation_matrix","text":"angle_deg Numeric. rotation angle degrees. axis Character. axis rotation: \"x\", \"y\", \"z\".","code":""},{"path":"/reference/create_rotation_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a 3D Rotation Matrix — create_rotation_matrix","text":"3x3 numeric matrix representing rotation.","code":""},{"path":"/reference/create_rotation_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a 3D Rotation Matrix — create_rotation_matrix","text":"","code":"create_rotation_matrix(90, \"z\") #>              [,1]          [,2] [,3] #> [1,] 6.123032e-17 -1.000000e+00    0 #> [2,] 1.000000e+00  6.123032e-17    0 #> [3,] 0.000000e+00  0.000000e+00    1"},{"path":"/reference/create_rotation_matrix_from_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Rotation Vector to Rotation Matrix — create_rotation_matrix_from_vector","title":"Convert Rotation Vector to Rotation Matrix — create_rotation_matrix_from_vector","text":"Converts 3-element rotation vector (axis-angle representation) 3x3 rotation matrix, using Rodrigues' rotation formula. Equivalent Python's scipy.spatial.transform.Rotation.from_rotvec.","code":""},{"path":"/reference/create_rotation_matrix_from_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Rotation Vector to Rotation Matrix — create_rotation_matrix_from_vector","text":"","code":"create_rotation_matrix_from_vector(theta3, in_degrees = FALSE)"},{"path":"/reference/create_rotation_matrix_from_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Rotation Vector to Rotation Matrix — create_rotation_matrix_from_vector","text":"theta3 numeric vector length 3, representing rotation vector. direction specifies axis rotation, magnitude specifies angle (radians default). in_degrees Logical. TRUE, elements theta3 interpreted degrees converted radians internally. Default FALSE.","code":""},{"path":"/reference/create_rotation_matrix_from_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Rotation Vector to Rotation Matrix — create_rotation_matrix_from_vector","text":"3x3 numeric matrix representing rotation.","code":""},{"path":"/reference/create_rotation_matrix_from_vector.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert Rotation Vector to Rotation Matrix — create_rotation_matrix_from_vector","text":"https://en.wikipedia.org/wiki/Axis-angle_representation#Rotation_vector https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.from_rotvec.html","code":""},{"path":"/reference/create_rotation_matrix_from_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Rotation Vector to Rotation Matrix — create_rotation_matrix_from_vector","text":"","code":"create_rotation_matrix_from_vector(c(0.5, 0.4, 0.3)) #>            [,1]       [,2]       [,3] #> [1,]  0.8801223 -0.1797154  0.4394168 #> [2,]  0.3715198  0.8369663 -0.4018214 #> [3,] -0.2955635  0.5169040  0.8034006 create_rotation_matrix_from_vector(c(30, 0, 0), in_degrees = TRUE) #>      [,1]      [,2]       [,3] #> [1,]    1 0.0000000  0.0000000 #> [2,]    0 0.8660254 -0.5000000 #> [3,]    0 0.5000000  0.8660254"},{"path":"/reference/extract_markerset_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Marker Set Information from OpenSim marker set file — extract_markerset_info","title":"Extract Marker Set Information from OpenSim marker set file — extract_markerset_info","text":"function extracts information markers OpenSim marker set file, including name, parent body, fixed status, location. Optionally, results can written CSV file.","code":""},{"path":"/reference/extract_markerset_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Marker Set Information from OpenSim marker set file — extract_markerset_info","text":"","code":"extract_markerset_info(   marker_file = \"markerset.xml\",   output_file = \"marker_info.csv\",   write_to_file = FALSE,   return_obj = TRUE )"},{"path":"/reference/extract_markerset_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Marker Set Information from OpenSim marker set file — extract_markerset_info","text":"marker_file character string specifying path marker set XML file. output_file character string specifying path output CSV file. write_to_file logical indicating whether write result CSV file. Default `FALSE`. return_obj logical indicating whether return data frame object. Default `TRUE`.","code":""},{"path":"/reference/extract_markerset_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Marker Set Information from OpenSim marker set file — extract_markerset_info","text":"data frame containing marker information.","code":""},{"path":"/reference/filter_lowpass_pad_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Markers with Padding to Avoid Artifacts — filter_lowpass_pad_df","title":"Filter Markers with Padding to Avoid Artifacts — filter_lowpass_pad_df","text":"function filters marker data using low-pass Butterworth filter padding start end data avoid artifacts.","code":""},{"path":"/reference/filter_lowpass_pad_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Markers with Padding to Avoid Artifacts — filter_lowpass_pad_df","text":"","code":"filter_lowpass_pad_df(   data,   time_col = \"Time\",   exclude_cols = c(1, 2),   cut_off = 6,   sample_rate = 200,   order = 2,   pad_time = 0.5 )"},{"path":"/reference/filter_lowpass_pad_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Markers with Padding to Avoid Artifacts — filter_lowpass_pad_df","text":"data data frame containing marker data filtered. time_col string indicating name column containing time vector. exclude_cols vector column indices (names) exclude filtering. Usually 1 2 remove Time Frame. cut_off Numeric. cut-frequency low-pass filter Hz. sample_rate Numeric. sample rate data Hz. order Numeric. order Butterworth filter. pad_time Numeric. time length pad data start end. use_spline_padding Logical. Whether use spline interpolation padding (TRUE) replicate first/last rows (FALSE). Default FALSE.","code":""},{"path":"/reference/filter_lowpass_pad_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Markers with Padding to Avoid Artifacts — filter_lowpass_pad_df","text":"data frame filtered marker data, padding removed.","code":""},{"path":"/reference/get_analog_c3d_osim.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Analog Data from C3D File — get_analog_c3d_osim","title":"Get Analog Data from C3D File — get_analog_c3d_osim","text":"function reads C3D file extracts analog data,  optionally writing .sto file /returning  opensim data table object.","code":""},{"path":"/reference/get_analog_c3d_osim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Analog Data from C3D File — get_analog_c3d_osim","text":"","code":"get_analog_c3d_osim(   file_input,   file_output = \"Analog.sto\",   write_file = TRUE,   return_object = FALSE )"},{"path":"/reference/get_analog_c3d_osim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Analog Data from C3D File — get_analog_c3d_osim","text":"file_input string specifying path input C3D file. file_output string specifying path output .sto file (default \"Analog.sto\"). write_file logical value indicating whether write output file (default TRUE). return_object logical value indicating whether return analog data object (default FALSE).","code":""},{"path":"/reference/get_analog_c3d_osim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Analog Data from C3D File — get_analog_c3d_osim","text":"`return_object` TRUE, returns analog data object; otherwise, returns NULL.","code":""},{"path":"/reference/get_EMG_c3d_osim.html","id":null,"dir":"Reference","previous_headings":"","what":"Get EMG Data from C3D File — get_EMG_c3d_osim","title":"Get EMG Data from C3D File — get_EMG_c3d_osim","text":"function reads C3D file, extracts EMG data, optionally writes .sto file /returns data data frame.","code":""},{"path":"/reference/get_EMG_c3d_osim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get EMG Data from C3D File — get_EMG_c3d_osim","text":"","code":"get_EMG_c3d_osim(   file_input,   file_output = \"EMG_RAW.sto\",   columns_exclude = c(1L:40L),   EMG_names = c(\"Voltage.1\", \"Voltage.2\", \"Voltage.3\", \"Voltage.4\", \"Voltage.6\",     \"Voltage.7\", \"Voltage.8\", \"Voltage.9\", \"Voltage.10\", \"Voltage.12\", \"Voltage.13\",     \"Voltage.14\", \"Voltage.15\", \"Voltage.16\"),   Muscle_names = c(\"vaslat_r\", \"recfem_r\", \"vasmed_r\", \"vasmed_l\", \"vaslat_l\", \"tfl_r\",     \"tfl_l\", \"bflh_l\", \"semiten_l\", \"semiten_r\", \"bflh_r\", \"gaslat_l\", \"gasmed_r\",     \"gaslat_r\"),   write_file = TRUE,   return_object = FALSE )"},{"path":"/reference/get_EMG_c3d_osim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get EMG Data from C3D File — get_EMG_c3d_osim","text":"file_input string specifying path input C3D file. file_output string specifying path output .sto file (default \"EMG_RAW.sto\"). columns_exclude numeric vector indices columns exclude EMG data. EMG_names character vector specifying names EMG channels extract (default includes \"Voltage.1\" \"Voltage.16\"). Muscle_names character vector specifying muscle names corresponding EMG data (default provided). write_file logical value indicating whether write output file (default TRUE). return_object logical value indicating whether return EMG data data frame (default FALSE).","code":""},{"path":"/reference/get_EMG_c3d_osim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get EMG Data from C3D File — get_EMG_c3d_osim","text":"`return_object` TRUE, returns EMG data data frame; otherwise, returns NULL.","code":""},{"path":"/reference/get_hex_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Hex Colors from a Color Scale — get_hex_colors","title":"Generate Hex Colors from a Color Scale — get_hex_colors","text":"function maps numeric values within specified range color gradient defined two colors. returns corresponding hex codes optionally plots color scale.","code":""},{"path":"/reference/get_hex_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Hex Colors from a Color Scale — get_hex_colors","text":"","code":"get_hex_colors(   numeric_values,   lower_bound = 0,   upper_bound = 1,   color_low = \"orange\",   color_high = \"green\",   resolution = 100,   plot_scale = FALSE )"},{"path":"/reference/get_hex_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Hex Colors from a Color Scale — get_hex_colors","text":"numeric_values numeric vector values map color scale. lower_bound numeric value specifying lower bound numeric values (default: 0). upper_bound numeric value specifying upper bound numeric values (default: 1). color_low string specifying color low end gradient (default: \"orange\"). color_high string specifying color high end gradient (default: \"green\"). resolution number colors generate color gradient (default: 100). plot_scale logical value indicating whether plot color scale (default: FALSE).","code":""},{"path":"/reference/get_hex_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Hex Colors from a Color Scale — get_hex_colors","text":"vector hex color codes corresponding input numeric values.","code":""},{"path":"/reference/get_hex_colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Hex Colors from a Color Scale — get_hex_colors","text":"","code":"# Example usage of get_hex_colors numeric_values <- c(5, 10, 15) get_hex_colors(numeric_values, lower_bound = 0, upper_bound = 20, color_low = \"blue\", color_high = \"red\") #> [1] \"#4000BE\" \"#80007E\" \"#BE0040\""},{"path":"/reference/osim_run_cmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Run OpenSim Command Line Tool — osim_run_cmd","title":"Run OpenSim Command Line Tool — osim_run_cmd","text":"function executes OpenSim command line tool using `opensim-cmd`.","code":""},{"path":"/reference/osim_run_cmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run OpenSim Command Line Tool — osim_run_cmd","text":"","code":"osim_run_cmd(opensim_path = \"C:/\\\"OpenSim 4.5\\\"/bin\", setup_file)"},{"path":"/reference/osim_run_cmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run OpenSim Command Line Tool — osim_run_cmd","text":"opensim_path character string specifying path OpenSim bin directory. setup_file character string specifying path setup file (.xml) run OpenSim.","code":""},{"path":"/reference/osim_run_cmd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run OpenSim Command Line Tool — osim_run_cmd","text":"result running OpenSim command.","code":""},{"path":"/reference/osim_viz_model_cmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize OpenSim Model — osim_viz_model_cmd","title":"Visualize OpenSim Model — osim_viz_model_cmd","text":"function visualizes OpenSim model using `opensim-cmd` tool.","code":""},{"path":"/reference/osim_viz_model_cmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize OpenSim Model — osim_viz_model_cmd","text":"","code":"osim_viz_model_cmd(   opensim_path = \"C:/\\\"OpenSim 4.5\\\"/bin\",   model_file_path = \"Trunk_pelvis_LL.osim\" )"},{"path":"/reference/osim_viz_model_cmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize OpenSim Model — osim_viz_model_cmd","text":"opensim_path character string specifying path OpenSim bin directory. model_file_path character string specifying path model file (.osim).","code":""},{"path":"/reference/osim_viz_model_cmd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize OpenSim Model — osim_viz_model_cmd","text":"result running OpenSim command.","code":""},{"path":"/reference/osim_viz_motion_cmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize Motion Using OpenSim — osim_viz_motion_cmd","title":"Visualize Motion Using OpenSim — osim_viz_motion_cmd","text":"function visualizes motion file using OpenSim command line tool `opensim-cmd`.","code":""},{"path":"/reference/osim_viz_motion_cmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Motion Using OpenSim — osim_viz_motion_cmd","text":"","code":"osim_viz_motion_cmd(   opensim_path = \"C:/\\\"OpenSim 4.5\\\"/bin\",   motion_file_path = \"ik.mot\",   model_file_path = \"Trunk_pelvis_LL.osim\" )"},{"path":"/reference/osim_viz_motion_cmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Motion Using OpenSim — osim_viz_motion_cmd","text":"opensim_path character string specifying path OpenSim bin directory. motion_file_path character string specifying path motion file (.mot .sto). model_file_path character string specifying path model file (.osim).","code":""},{"path":"/reference/osim_viz_motion_cmd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize Motion Using OpenSim — osim_viz_motion_cmd","text":"result running OpenSim command.","code":""},{"path":"/reference/osim_viz_trc_cmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize Marker Data in OpenSim — osim_viz_trc_cmd","title":"Visualize Marker Data in OpenSim — osim_viz_trc_cmd","text":"function visualizes marker data OpenSim using `opensim-cmd` tool.","code":""},{"path":"/reference/osim_viz_trc_cmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Marker Data in OpenSim — osim_viz_trc_cmd","text":"","code":"osim_viz_trc_cmd(   opensim_path = \"C:/\\\"OpenSim 4.5\\\"/bin\",   trc_file_path = \"marker.trc\" )"},{"path":"/reference/osim_viz_trc_cmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Marker Data in OpenSim — osim_viz_trc_cmd","text":"opensim_path character string specifying path OpenSim bin directory. trc_file_path character string specifying path TRC file containing marker data (.trc).","code":""},{"path":"/reference/osim_viz_trc_cmd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize Marker Data in OpenSim — osim_viz_trc_cmd","text":"result running OpenSim command.","code":""},{"path":"/reference/prescribe_motion_osim.html","id":null,"dir":"Reference","previous_headings":"","what":"Prescribe Motion to OpenSim Model — prescribe_motion_osim","title":"Prescribe Motion to OpenSim Model — prescribe_motion_osim","text":"function prescribes motion coordinates OpenSim model based inverse kinematics (IK) data. can save modified model file return updated model object. Note input model must already locked joints welded prior using function.","code":""},{"path":"/reference/prescribe_motion_osim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prescribe Motion to OpenSim Model — prescribe_motion_osim","text":"","code":"prescribe_motion_osim(   model_input_file = \"model_file.osim\",   model_output_file = \"model_prescribed.osim\",   IK_file = \"IK.mot\",   low_pass_cutoff = 6,   write_file = TRUE,   return_object = FALSE )"},{"path":"/reference/prescribe_motion_osim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prescribe Motion to OpenSim Model — prescribe_motion_osim","text":"model_input_file string specifying path input OpenSim model file (default \"model_file.osim\"). model_output_file string specifying path output updated OpenSim model file (default \"model_prescribed.osim\"). IK_file string specifying path IK data file (default \"IK.mot\"). low_pass_cutoff numeric value specifying cutoff frequency low-pass filter (default 6). ignored numeric value >= 1. write_file logical value indicating whether write updated model file (default TRUE). return_object logical value indicating whether return updated model object (default FALSE).","code":""},{"path":"/reference/prescribe_motion_osim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prescribe Motion to OpenSim Model — prescribe_motion_osim","text":"`return_object` TRUE, returns modified OpenSim model object; otherwise, NULL.","code":""},{"path":"/reference/read.trc.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a trc file — read.trc","title":"Read a trc file — read.trc","text":"Read trc file","code":""},{"path":"/reference/read.trc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a trc file — read.trc","text":"","code":"read.trc()"},{"path":"/reference/read.trc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a trc file — read.trc","text":"x trc file","code":""},{"path":"/reference/read.trc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a trc file — read.trc","text":"Dataframe containing marker data extracted trc file","code":""},{"path":"/reference/read_mot_sto.html","id":null,"dir":"Reference","previous_headings":"","what":"Read OpenSim MOT or STO File as Data Frame — read_mot_sto","title":"Read OpenSim MOT or STO File as Data Frame — read_mot_sto","text":"function reads OpenSim MOT STO file data frame. file read locating line containing word \"time\".","code":""},{"path":"/reference/read_mot_sto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read OpenSim MOT or STO File as Data Frame — read_mot_sto","text":"","code":"read_mot_sto(filename)"},{"path":"/reference/read_mot_sto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read OpenSim MOT or STO File as Data Frame — read_mot_sto","text":"filename character string specifying path file read.","code":""},{"path":"/reference/read_mot_sto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read OpenSim MOT or STO File as Data Frame — read_mot_sto","text":"data frame containing data file, starting line includes word \"time\".","code":""},{"path":"/reference/read_trc.html","id":null,"dir":"Reference","previous_headings":"","what":"Read TRC File into Data Frame — read_trc","title":"Read TRC File into Data Frame — read_trc","text":"function reads TRC (marker trajectory) file returns data frame. function processes header extract marker names adjusts column names accordingly.","code":""},{"path":"/reference/read_trc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read TRC File into Data Frame — read_trc","text":"","code":"read_trc(filename)"},{"path":"/reference/read_trc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read TRC File into Data Frame — read_trc","text":"filename character string specifying path TRC file read.","code":""},{"path":"/reference/read_trc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read TRC File into Data Frame — read_trc","text":"data frame columns frame number, time, marker coordinates (X, Y, Z).","code":""},{"path":"/reference/remove_side_osim.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Side from OpenSim Model — remove_side_osim","title":"Remove Side from OpenSim Model — remove_side_osim","text":"function removes actuators specified side (left right) OpenSim model.","code":""},{"path":"/reference/remove_side_osim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Side from OpenSim Model — remove_side_osim","text":"","code":"remove_side_osim(   model_input_file = \"Baseline_markers.osim\",   model_output_file = \"Baseline_markers_removed.osim\",   side = \"l\" )"},{"path":"/reference/remove_side_osim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Side from OpenSim Model — remove_side_osim","text":"model_input_file string representing path input OpenSim model file. Default \"Baseline_markers.osim\". model_output_file string representing path output OpenSim model file. Default \"Baseline_markers_removed.osim\". side string indicating side (left right) body remove actuators . Default \"l\" (left).","code":""},{"path":"/reference/remove_side_osim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Side from OpenSim Model — remove_side_osim","text":"function returns nothing, writes modified OpenSim model `model_output_file`.","code":""},{"path":"/reference/replace_side_torque_osim.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace Side Torque in OpenSim Model — replace_side_torque_osim","title":"Replace Side Torque in OpenSim Model — replace_side_torque_osim","text":"function removes actuators specified side (left right) OpenSim model adds new coordinate actuators (torques) corresponding side certain body parts (e.g., hip, knee, ankle). Locked joints automatically skipped.","code":""},{"path":"/reference/replace_side_torque_osim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace Side Torque in OpenSim Model — replace_side_torque_osim","text":"","code":"replace_side_torque_osim(   model_input_file = \"Baseline_markers.osim\",   model_output_file = \"Baseline_markers_removed.osim\",   side = \"l\",   optimal_force = 10 )"},{"path":"/reference/replace_side_torque_osim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace Side Torque in OpenSim Model — replace_side_torque_osim","text":"model_input_file string representing path input OpenSim model file. Default \"Baseline_markers.osim\". model_output_file string representing path output OpenSim model file. Default \"Baseline_markers_removed.osim\". side string indicating side (left right) body remove actuators . Default \"l\" (left).","code":""},{"path":"/reference/replace_side_torque_osim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace Side Torque in OpenSim Model — replace_side_torque_osim","text":"function returns nothing, writes modified OpenSim model `model_output_file`.","code":""},{"path":"/reference/resample.html","id":null,"dir":"Reference","previous_headings":"","what":"Resample a numeric data frame (where the first column represents time) to the specified sample rate — resample","title":"Resample a numeric data frame (where the first column represents time) to the specified sample rate — resample","text":"function resamples numeric data frame specified sample rate using interpolation.","code":""},{"path":"/reference/resample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resample a numeric data frame (where the first column represents time) to the specified sample rate — resample","text":"","code":"resample(data, sample_rate_output = 100, method = \"cubic\")"},{"path":"/reference/resample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resample a numeric data frame (where the first column represents time) to the specified sample rate — resample","text":"data numeric data frame column time series resampled. first column time vector. sample_rate_output Integer, desired sample rate (Hz) output signal. Default 100Hz. method Character, interpolation method use. Default \"cubic\". Options include \"linear\", \"nearest\", \"spline\", \"pchip\", etc.","code":""},{"path":"/reference/resample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resample a numeric data frame (where the first column represents time) to the specified sample rate — resample","text":"data frame number columns `data`, column resampled specified sample rate.","code":""},{"path":"/reference/rigid_body_transformed_markers_svd.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Rigid Body Transformation to Markers Using SVD — rigid_body_transformed_markers_svd","title":"Apply Rigid Body Transformation to Markers Using SVD — rigid_body_transformed_markers_svd","text":"function applies rigid body transformation set target 3D markers using singular value decomposition (SVD) based reference set 3D markers.","code":""},{"path":"/reference/rigid_body_transformed_markers_svd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Rigid Body Transformation to Markers Using SVD — rigid_body_transformed_markers_svd","text":"","code":"rigid_body_transformed_markers_svd(reference_data, target_data)"},{"path":"/reference/rigid_body_transformed_markers_svd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Rigid Body Transformation to Markers Using SVD — rigid_body_transformed_markers_svd","text":"reference_data matrix data frame containing reference 3D marker data (dimensions N x 3M, N number frames M number markers). target_data matrix data frame containing target 3D marker data (dimensions N x 3M, N number frames M number markers).","code":""},{"path":"/reference/rigid_body_transformed_markers_svd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Rigid Body Transformation to Markers Using SVD — rigid_body_transformed_markers_svd","text":"data frame containing transformed 3D marker data frame.","code":""},{"path":"/reference/rigid_transform_svd.html","id":null,"dir":"Reference","previous_headings":"","what":"Rigid Body Transformation (Söderkvist & Wedin Method) Between Two Marker Frames — rigid_transform_svd","title":"Rigid Body Transformation (Söderkvist & Wedin Method) Between Two Marker Frames — rigid_transform_svd","text":"Computes 4x4 rigid body transformation matrix two frames 3D marker data, using SVD method Söderkvist & Wedin (1993).","code":""},{"path":"/reference/rigid_transform_svd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rigid Body Transformation (Söderkvist & Wedin Method) Between Two Marker Frames — rigid_transform_svd","text":"","code":"rigid_transform_svd(reference_data, target_data)"},{"path":"/reference/rigid_transform_svd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rigid Body Transformation (Söderkvist & Wedin Method) Between Two Marker Frames — rigid_transform_svd","text":"reference_data data frame matrix representing reference frame (e.g., time 1). target_data data frame matrix representing target frame (e.g., time 2).","code":""},{"path":"/reference/rigid_transform_svd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rigid Body Transformation (Söderkvist & Wedin Method) Between Two Marker Frames — rigid_transform_svd","text":"list containing: T 4x4 transformation matrix (rotation translation) res Residual error (Euclidean norm adjusted DOF)","code":""},{"path":"/reference/rigid_transform_svd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Rigid Body Transformation (Söderkvist & Wedin Method) Between Two Marker Frames — rigid_transform_svd","text":"Söderkvist & Wedin (1993). Determining movements skeleton using well-configured markers.            Journal Biomechanics, 26:1473–1477.","code":""},{"path":"/reference/rotate_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate 3D Coordinates Using a Rotation Matrix — rotate_coords","title":"Rotate 3D Coordinates Using a Rotation Matrix — rotate_coords","text":"Applies 3x3 rotation matrix set 3D coordinates.","code":""},{"path":"/reference/rotate_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotate 3D Coordinates Using a Rotation Matrix — rotate_coords","text":"","code":"rotate_coords(x, y, z, rotation_matrix)"},{"path":"/reference/rotate_coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotate 3D Coordinates Using a Rotation Matrix — rotate_coords","text":"x, y, z Numeric vectors equal length representing 3D coordinates. rotation_matrix 3x3 numeric matrix used rotate coordinates.","code":""},{"path":"/reference/rotate_coords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rotate 3D Coordinates Using a Rotation Matrix — rotate_coords","text":"data frame rotated coordinates (`x`, `y`, `z`).","code":""},{"path":"/reference/rotate_coords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rotate 3D Coordinates Using a Rotation Matrix — rotate_coords","text":"","code":"rot_mat <- create_rotation_matrix(90, \"z\") rotate_coords(1, 0, 0, rot_mat) #>              x  y z #> 1 6.123032e-17 -1 0"},{"path":"/reference/rotate_markers.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate 3D Marker Coordinates in a Data Frame — rotate_markers","title":"Rotate 3D Marker Coordinates in a Data Frame — rotate_markers","text":"Applies 3D rotation marker columns data frame. Marker columns expected follow naming pattern: `marker_X`, `marker_Y`, `marker_Z`.","code":""},{"path":"/reference/rotate_markers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotate 3D Marker Coordinates in a Data Frame — rotate_markers","text":"","code":"rotate_markers(data, angle_deg, axis, ignore_case = T)"},{"path":"/reference/rotate_markers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotate 3D Marker Coordinates in a Data Frame — rotate_markers","text":"data data frame containing 3D marker coordinates. angle_deg Numeric. rotation angle degrees. axis Character. axis rotation: \"x\", \"y\", \"z\". ignore_case Logical. column name matching suffix (e.g., \"_X\") ignore case? Default TRUE.","code":""},{"path":"/reference/rotate_markers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rotate 3D Marker Coordinates in a Data Frame — rotate_markers","text":"data frame rotated marker coordinates.","code":""},{"path":"/reference/rotate_osim_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate an Opensim Data Table — rotate_osim_table","title":"Rotate an Opensim Data Table — rotate_osim_table","text":"function rotates specified OpenSim data table around given axis specified angle degrees.","code":""},{"path":"/reference/rotate_osim_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotate an Opensim Data Table — rotate_osim_table","text":"","code":"rotate_osim_table(table_object, axis = c(1, 0, 0), deg = -90)"},{"path":"/reference/rotate_osim_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotate an Opensim Data Table — rotate_osim_table","text":"table_object object representing OpenSim data table. axis numeric vector length 3 specifying rotation axis (default c(1, 0, 0)). deg numeric value specifying rotation angle degrees (default -90).","code":""},{"path":"/reference/rotate_osim_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rotate an Opensim Data Table — rotate_osim_table","text":"NULL. function modifies input `table_object` place.","code":""},{"path":"/reference/setup_body_kinematics_xml.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Up Body Kinematics XML for Analysis — setup_body_kinematics_xml","title":"Set Up Body Kinematics XML for Analysis — setup_body_kinematics_xml","text":"function modifies XML configuration file body kinematics analysis updating various parameters related analysis setup. XML file updated information model file, force set files, results directory, analysis times, solver options. modified XML saved specified setup file.","code":""},{"path":"/reference/setup_body_kinematics_xml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Up Body Kinematics XML for Analysis — setup_body_kinematics_xml","text":"","code":"setup_body_kinematics_xml(   base_file = \"setup_bk_base.xml\",   model_file = \"model_scaled.osim\",   replace_force_set = \"false\",   force_set_files = \"reserve_actuators.xml\",   results_directory = \".\",   output_precision = \"12\",   start_time,   end_time,   solve_for_equilibrium_for_auxiliary_states = \"false\",   maximum_number_of_integrator_steps = \"20000\",   maximum_integrator_step_size = \"1\",   minimum_integrator_step_size = \"1e-05\",   integrator_error_tolerance = \"1e-05\",   step_interval = \"1\",   in_degrees = \"true\",   bodies = \"all\",   express_results_in_body_local_frame = \"false\",   external_loads_file = \"external_loads.xml\",   coordinates_file = \"ik.mot\",   lowpass_cutoff_frequency_for_coordinates = \"8\",   setup_filename = \"setup_bk.xml\" )"},{"path":"/reference/setup_body_kinematics_xml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Up Body Kinematics XML for Analysis — setup_body_kinematics_xml","text":"base_file Character string. path base XML file modified (default \"setup_bk_base.xml\"). model_file Character string. path model file used (default \"model_scaled.osim\"). replace_force_set Character string. Whether replace force set (\"true\" \"false\", default \"false\"). force_set_files Character string. path force set files used (default \"reserve_actuators.xml\"). results_directory Character string. directory results saved (default current directory, \".\"). output_precision Character string. desired precision output (default \"12\"). start_time Numeric. start time analysis (seconds). end_time Numeric. end time analysis (seconds). solve_for_equilibrium_for_auxiliary_states Character string. Whether solve equilibrium auxiliary states (\"true\" \"false\", default \"false\"). maximum_number_of_integrator_steps Numeric. maximum number integrator steps (default 20000). maximum_integrator_step_size Numeric. maximum size integrator step (default 1). minimum_integrator_step_size Numeric. minimum size integrator step (default 1e-05). integrator_error_tolerance Numeric. error tolerance integrator (default 1e-05). step_interval Numeric. step interval body kinematics analysis (default \"1\"). in_degrees Character string. Whether results expressed degrees (\"true\" \"false\", default \"true\"). bodies Character string. bodies include analysis (default \"\"). express_results_in_body_local_frame Character string. Whether express results body local frame (\"true\" \"false\", default \"false\"). external_loads_file Character string. path external loads file (default \"external_loads.xml\"). coordinates_file Character string. path coordinates file (default \"ik.mot\"). lowpass_cutoff_frequency_for_coordinates Numeric. cutoff frequency lowpass filtering coordinates (default \"8\"). setup_filename Character string. name XML file save modified configuration (default \"setup_bk.xml\").","code":""},{"path":"/reference/setup_body_kinematics_xml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Up Body Kinematics XML for Analysis — setup_body_kinematics_xml","text":"function return value. modifies XML file place saves provided `setup_filename`.","code":""},{"path":"/reference/setup_body_kinematics_xml.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set Up Body Kinematics XML for Analysis — setup_body_kinematics_xml","text":"function uses `XML` package parse modify XML configuration file. parameter function corresponds specific element XML, value updated accordingly. modified XML file saved specified location.","code":""},{"path":"/reference/setup_external_loads_xml.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup External Loads XML — setup_external_loads_xml","title":"Setup External Loads XML — setup_external_loads_xml","text":"function sets XML file external loads modifying given base XML file specified parameters (leg, body, datafile) saves updated XML file specified filename.","code":""},{"path":"/reference/setup_external_loads_xml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup External Loads XML — setup_external_loads_xml","text":"","code":"setup_external_loads_xml(   base_file = \"external_loads_base.xml\",   leg = \"Left\",   body = \"calcn_l\",   datafile = \"grf.mot\",   setup_filename = \"external_loads.xml\" )"},{"path":"/reference/setup_external_loads_xml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup External Loads XML — setup_external_loads_xml","text":"base_file character string specifying path base XML file. Default \"external_loads_base.xml\". leg character string specifying leg (e.g., \"Left\" \"Right\"). Default \"Left\". body character string specifying body part (e.g., \"calcn_l\"). Default \"calcn_l\". datafile character string specifying name data file. Default \"grf.mot\". setup_filename character string specifying name output setup XML file. Default \"external_loads.xml\".","code":""},{"path":"/reference/setup_external_loads_xml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup External Loads XML — setup_external_loads_xml","text":"function return value. writes modified XML specified setup_filename.","code":""},{"path":"/reference/setup_induced_acceleration_rolling_xml.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Up Induced Acceleration Rolling XML for Simulation — setup_induced_acceleration_rolling_xml","title":"Set Up Induced Acceleration Rolling XML for Simulation — setup_induced_acceleration_rolling_xml","text":"function modifies XML configuration file induced acceleration analysis rolling constraints. updates XML file information model file, force set files, results directory, analysis times, specific rolling constraint parameters. modified XML file saved specified setup filename.","code":""},{"path":"/reference/setup_induced_acceleration_rolling_xml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Up Induced Acceleration Rolling XML for Simulation — setup_induced_acceleration_rolling_xml","text":"","code":"setup_induced_acceleration_rolling_xml(   base_file = \"setup_iaa_base.xml\",   model_file = \"model_scaled.osim\",   replace_force_set = \"false\",   force_set_files = \"reserve_actuators.xml\",   results_directory = \".\",   output_precision = \"12\",   start_time,   end_time,   solve_for_equilibrium_for_auxiliary_states = \"false\",   maximum_number_of_integrator_steps = \"20000\",   maximum_integrator_step_size = \"1\",   minimum_integrator_step_size = \"1e-05\",   integrator_error_tolerance = \"1e-05\",   step_interval = \"1\",   in_degrees = \"true\",   coordinate_names = \"all\",   body_names = \"all\",   constraint_type = \"roll\",   force_threshold = \"5\",   compute_potentials_only = \"true\",   report_constraint_reactions = \"true\",   rolling_body = \"calcn_r\",   surface_body = \"ground\",   surface_normal = \"0 1 0\",   surface_height = \"0\",   friction_coefficient = \"0.65\",   contact_radius = \"0.01\",   external_loads_file = \"external_loads.xml\",   coordinates_file = \"ik.mot\",   lowpass_cutoff_frequency_for_coordinates = \"12\",   setup_filename = \"setup_iaa.xml\" )"},{"path":"/reference/setup_induced_acceleration_rolling_xml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Up Induced Acceleration Rolling XML for Simulation — setup_induced_acceleration_rolling_xml","text":"base_file Character string. path base XML file modified (default \"setup_iaa_base.xml\"). model_file Character string. path model file used (default \"model_scaled.osim\"). replace_force_set Character string. Whether replace force set (\"true\" \"false\", default \"false\"). force_set_files Character string. path force set files used (default \"reserve_actuators.xml\"). results_directory Character string. directory results saved (default current directory, \".\"). output_precision Character string. desired precision output (default \"12\"). start_time Numeric. start time analysis (seconds). end_time Numeric. end time analysis (seconds). solve_for_equilibrium_for_auxiliary_states Character string. Whether solve equilibrium auxiliary states (\"true\" \"false\", default \"false\"). maximum_number_of_integrator_steps Numeric. maximum number integrator steps (default 20000). maximum_integrator_step_size Numeric. maximum size integrator step (default 1). minimum_integrator_step_size Numeric. minimum size integrator step (default 1e-05). integrator_error_tolerance Numeric. error tolerance integrator (default 1e-05). step_interval Numeric. step interval induced acceleration analysis (default \"1\"). in_degrees Character string. Whether results expressed degrees (\"true\" \"false\", default \"true\"). coordinate_names Character string. list coordinates include analysis (default \"\"). body_names Character string. list bodies include analysis (default \"\"). constraint_type Character string. type constraint (\"roll\", \"pitch\", etc., default \"roll\"). force_threshold Numeric. threshold force inclusion analysis (default 5). compute_potentials_only Character string. Whether compute potentials (\"true\" \"false\", default \"true\"). report_constraint_reactions Character string. Whether report constraint reactions (\"true\" \"false\", default \"true\"). rolling_body Character string. name rolling body (default \"calcn_r\"). surface_body Character string. name surface body (default \"ground\"). surface_normal Character string. normal vector surface (default \"0 1 0\"). surface_height Numeric. height surface (default 0). friction_coefficient Numeric. coefficient friction surface (default 0.65). contact_radius Numeric. radius contact (default 0.01). external_loads_file Character string. path external loads file (default \"external_loads.xml\"). coordinates_file Character string. path coordinates file (default \"ik.mot\"). lowpass_cutoff_frequency_for_coordinates Numeric. cutoff frequency lowpass filtering coordinates (default \"12\"). setup_filename Character string. name XML file save modified configuration (default \"setup_iaa.xml\").","code":""},{"path":"/reference/setup_induced_acceleration_rolling_xml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Up Induced Acceleration Rolling XML for Simulation — setup_induced_acceleration_rolling_xml","text":"function return value. modifies XML file place saves provided `setup_filename`.","code":""},{"path":"/reference/setup_induced_acceleration_rolling_xml.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set Up Induced Acceleration Rolling XML for Simulation — setup_induced_acceleration_rolling_xml","text":"function uses `XML` package parse modify XML configuration file. parameter function corresponds specific element XML, value updated accordingly. modified XML file saved specified location.","code":""},{"path":"/reference/setup_inverse_dynamics_xml.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Up Inverse Dynamics XML for Simulation — setup_inverse_dynamics_xml","title":"Set Up Inverse Dynamics XML for Simulation — setup_inverse_dynamics_xml","text":"function modifies XML configuration file inverse dynamics analysis. updates XML file various parameters model file, external loads, analysis times, forces exclude, configuration settings specific inverse dynamics. modified XML file saved specified setup filename.","code":""},{"path":"/reference/setup_inverse_dynamics_xml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Up Inverse Dynamics XML for Simulation — setup_inverse_dynamics_xml","text":"","code":"setup_inverse_dynamics_xml(   base_file = \"setup_id_base.xml\",   results_directory = \".\",   model_file = \"model_scaled.osim\",   start_time,   end_time,   forces_to_exclude = \"Muscles\",   external_loads_file = \"external_loads.xml\",   coordinates_file = \"ik.mot\",   lowpass_cutoff_frequency_for_coordinates = \"8\",   output_gen_force_file = \"inverse_dynamics.sto\",   setup_filename = \"setup_id.xml\" )"},{"path":"/reference/setup_inverse_dynamics_xml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Up Inverse Dynamics XML for Simulation — setup_inverse_dynamics_xml","text":"base_file Character string. path base XML file modified (default \"setup_id_base.xml\"). results_directory Character string. directory results saved (default current directory, \".\"). model_file Character string. path model file used (default \"model_scaled.osim\"). start_time Numeric. start time analysis (seconds). end_time Numeric. end time analysis (seconds). forces_to_exclude Character string. Forces exclude analysis (default \"Muscles\"). external_loads_file Character string. path external loads file (default \"external_loads.xml\"). coordinates_file Character string. path coordinates file (default \"ik.mot\"). lowpass_cutoff_frequency_for_coordinates Numeric. cutoff frequency lowpass filtering coordinates (default \"8\"). output_gen_force_file Character string. name output file generalized forces (default \"inverse_dynamics.sto\"). setup_filename Character string. name XML file save modified configuration (default \"setup_id.xml\").","code":""},{"path":"/reference/setup_inverse_dynamics_xml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Up Inverse Dynamics XML for Simulation — setup_inverse_dynamics_xml","text":"function return value. modifies XML file place saves provided `setup_filename`.","code":""},{"path":"/reference/setup_inverse_dynamics_xml.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set Up Inverse Dynamics XML for Simulation — setup_inverse_dynamics_xml","text":"function uses `XML` package parse modify XML configuration file. parameter function corresponds specific element XML, value updated accordingly. modified XML file saved specified location.","code":""},{"path":"/reference/setup_inverse_kinematics_xml.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup Inverse Kinematics XML — setup_inverse_kinematics_xml","title":"Setup Inverse Kinematics XML — setup_inverse_kinematics_xml","text":"function sets XML file inverse kinematics modifying given base XML file specified parameters (e.g., model, marker data, time range, etc.) saves updated XML file specified filename.","code":""},{"path":"/reference/setup_inverse_kinematics_xml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup Inverse Kinematics XML — setup_inverse_kinematics_xml","text":"","code":"setup_inverse_kinematics_xml(   base_file = \"setup_ik_base.xml\",   results_directory = \".\",   model_file = \"model_scaled.osim\",   constraint_weight = \"Inf\",   accuracy = \"1e-005\",   marker_file = \"marker_data.trc\",   coordinate_file = \"Unassigned\",   start_time,   end_time,   report_errors = \"true\",   output_motion_file = \"ik.mot\",   report_marker_locations = \"true\",   Markers,   Weights = rep(1, length(Markers)),   setup_filename = \"setup_ik.xml\" )"},{"path":"/reference/setup_inverse_kinematics_xml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup Inverse Kinematics XML — setup_inverse_kinematics_xml","text":"base_file character string specifying path base XML file. Default \"setup_ik_base.xml\". results_directory character string specifying directory saving results. Default current directory (\".\"). model_file character string specifying path scaled model file. Default \"model_scaled.osim\". constraint_weight character string numeric specifying constraint weight. Default \"Inf\". accuracy character string numeric specifying desired accuracy. Default \"1e-005\". marker_file character string specifying path marker data file. Default \"marker_data.trc\". coordinate_file character string specifying path coordinate file. Default \"Unassigned\". start_time numeric value specifying start time simulation. end_time numeric value specifying end time simulation. report_errors character string specifying whether report errors (\"true\" \"false\"). Default \"true\". output_motion_file character string specifying output motion file name. Default \"ik.mot\". report_marker_locations character string specifying whether report marker locations (\"true\" \"false\"). Default \"true\". Markers character vector specifying names markers used inverse kinematics setup. Weights numeric vector specifying weight marker. Default vector 1's length `Markers`. setup_filename character string specifying name output setup XML file. Default \"setup_ik.xml\".","code":""},{"path":"/reference/setup_inverse_kinematics_xml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup Inverse Kinematics XML — setup_inverse_kinematics_xml","text":"function return value. writes modified XML specified setup_filename.","code":""},{"path":"/reference/setup_joint_reaction_osim.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup Joint Reaction for OpenSim Analysis — setup_joint_reaction_osim","title":"Setup Joint Reaction for OpenSim Analysis — setup_joint_reaction_osim","text":"function sets OpenSim `AnalyzeTool` calculating joint reactions generates corresponding XML setup file. function configures parameters model, force sets, joint reactions, can either save setup file return configured `AnalyzeTool` object use.","code":""},{"path":"/reference/setup_joint_reaction_osim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup Joint Reaction for OpenSim Analysis — setup_joint_reaction_osim","text":"","code":"setup_joint_reaction_osim(   model_file = \"model_scaled.osim\",   replace_force_set = FALSE,   force_set_file = \"reserve_actuators.xml\",   results_directory = \".\",   start_time = 0,   end_time = 3,   solve_for_equilibrium_for_auxiliary_states = TRUE,   coordinates_file = NULL,   controls_file = NULL,   states_file = NULL,   in_degrees = TRUE,   forces_file = \"force.sto\",   on_body = \"parent\",   in_frame = \"child\",   joint_name = \"all\",   step_interval = 1,   setup_filename = \"setup_jr.xml\",   write_file = FALSE,   return_object = TRUE )"},{"path":"/reference/setup_joint_reaction_osim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup Joint Reaction for OpenSim Analysis — setup_joint_reaction_osim","text":"model_file character string specifying path scaled OpenSim model file. Default \"model_scaled.osim\". replace_force_set logical value indicating whether replace force set. Default `FALSE`. force_set_file character string specifying path force set XML file. Default \"reserve_actuators.xml\". results_directory character string specifying directory storing results. Default current working directory. start_time numeric value specifying start time analysis. Default `0`. end_time numeric value specifying end time analysis. Default `3`. solve_for_equilibrium_for_auxiliary_states logical value specifying whether solve equilibrium auxiliary states. Default `TRUE`. coordinates_file character string specifying path coordinates file. Default `NULL`. controls_file character string specifying path controls file. Default `NULL`. states_file character string specifying path states file. Default `NULL`. in_degrees logical value indicating whether joint reaction angles returned degrees. Default `TRUE`. forces_file character string specifying path forces file. Default \"force.sto\". on_body character string specifying body joint reaction applied. Default 'child'. in_frame character string specifying frame compute joint reaction. Default \"child\". joint_name character string specifying name joint(s) joint reaction. Default ''. step_interval numeric value specifying step interval analysis. Default `1`. setup_filename character string specifying name output setup XML file. Default \"setup_jr.xml\". write_file logical value indicating whether write XML setup file disk. Default `FALSE`. return_object logical value indicating whether return `AnalyzeTool` object. Default `TRUE`.","code":""},{"path":"/reference/setup_joint_reaction_osim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup Joint Reaction for OpenSim Analysis — setup_joint_reaction_osim","text":"`write_file` `TRUE`, writes XML setup file disk. `return_object` `TRUE`, returns `AnalyzeTool` object.         neither `TRUE`, function returns `NULL` invisibly.","code":""},{"path":"/reference/setup_joint_reaction_xml.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Up Joint Reaction XML for Simulation — setup_joint_reaction_xml","title":"Set Up Joint Reaction XML for Simulation — setup_joint_reaction_xml","text":"function modifies XML configuration file joint reaction analysis. updates XML file various parameters model file, force set files, analysis times, integrator settings, joint names, forces file, configuration parameters related joint reactions. modified XML file saved specified setup filename.","code":""},{"path":"/reference/setup_joint_reaction_xml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Up Joint Reaction XML for Simulation — setup_joint_reaction_xml","text":"","code":"setup_joint_reaction_xml(   base_file = \"setup_jr_base.xml\",   model_file = \"model_scaled.osim\",   replace_force_set = \"false\",   force_set_files = \"reserve_actuators.xml\",   results_directory = \".\",   output_precision = \"12\",   start_time,   end_time,   solve_for_equilibrium_for_auxiliary_states = \"false\",   maximum_number_of_integrator_steps = \"20000\",   maximum_integrator_step_size = \"1\",   minimum_integrator_step_size = \"1e-05\",   integrator_error_tolerance = \"1e-05\",   step_interval = \"1\",   in_degrees = \"true\",   forces_file = \"Forces.sto\",   joint_names = \"all\",   apply_on_bodies = \"parent\",   express_in_frame = \"child\",   external_loads_file = \"external_loads.xml\",   coordinates_file = \"ik.mot\",   lowpass_cutoff_frequency_for_coordinates = \"12\",   setup_filename = \"setup_jr.xml\" )"},{"path":"/reference/setup_joint_reaction_xml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Up Joint Reaction XML for Simulation — setup_joint_reaction_xml","text":"base_file Character string. path base XML file modified (default \"setup_jr_base.xml\"). model_file Character string. path model file used (default \"model_scaled.osim\"). replace_force_set Character string. Whether replace force set (\"true\" \"false\", default \"false\"). force_set_files Character string. path force set files used (default \"reserve_actuators.xml\"). results_directory Character string. directory results saved (default current directory, \".\"). output_precision Character string. desired precision output (default \"12\"). start_time Numeric. start time analysis (seconds). end_time Numeric. end time analysis (seconds). solve_for_equilibrium_for_auxiliary_states Character string. Whether solve equilibrium auxiliary states (\"true\" \"false\", default \"false\"). maximum_number_of_integrator_steps Numeric. maximum number integrator steps (default 20000). maximum_integrator_step_size Numeric. maximum size integrator step (default 1). minimum_integrator_step_size Numeric. minimum size integrator step (default 1e-05). integrator_error_tolerance Numeric. error tolerance integrator (default 1e-05). step_interval Numeric. step interval joint reaction analysis (default \"1\"). in_degrees Character string. Whether results expressed degrees (\"true\" \"false\", default \"true\"). forces_file Character string. path forces file (default \"Forces.sto\"). joint_names Character string. names joints analyze (default \"\"). apply_on_bodies Character string. Whether apply analysis parent child bodies (\"parent\" \"child\", default \"parent\"). express_in_frame Character string. frame express reaction forces (\"child\" \"parent\", default \"child\"). external_loads_file Character string. path external loads file (default \"external_loads.xml\"). coordinates_file Character string. path coordinates file (default \"ik.mot\"). lowpass_cutoff_frequency_for_coordinates Numeric. cutoff frequency lowpass filtering coordinates (default \"12\"). setup_filename Character string. name XML file save modified configuration (default \"setup_jr.xml\").","code":""},{"path":"/reference/setup_joint_reaction_xml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Up Joint Reaction XML for Simulation — setup_joint_reaction_xml","text":"function return value. modifies XML file place saves provided `setup_filename`.","code":""},{"path":"/reference/setup_joint_reaction_xml.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set Up Joint Reaction XML for Simulation — setup_joint_reaction_xml","text":"function uses `XML` package parse modify XML configuration file. parameter function corresponds specific element XML, value updated accordingly. modified XML file saved specified location.","code":""},{"path":"/reference/setup_kinematic_analysis_osim.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup Kinematic Analysis for OpenSim — setup_kinematic_analysis_osim","title":"Setup Kinematic Analysis for OpenSim — setup_kinematic_analysis_osim","text":"function configures sets kinematic analysis OpenSim given model. analysis runs using specified parameters, options save results return analysis tool object use.","code":""},{"path":"/reference/setup_kinematic_analysis_osim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup Kinematic Analysis for OpenSim — setup_kinematic_analysis_osim","text":"","code":"setup_kinematic_analysis_osim(   model_file = \"model_scaled.osim\",   replace_force_set = FALSE,   force_set_file = \"reserve_actuators.xml\",   results_directory = \".\",   start_time = 0,   end_time = 3,   solve_for_equilibrium_for_auxiliary_states = TRUE,   coordinates_file = NULL,   controls_file = NULL,   states_file = NULL,   in_degrees = TRUE,   step_interval = 1,   setup_filename = \"setup_ka.xml\",   write_file = FALSE,   return_object = TRUE )"},{"path":"/reference/setup_kinematic_analysis_osim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup Kinematic Analysis for OpenSim — setup_kinematic_analysis_osim","text":"model_file string specifying path OpenSim model file. Default \"model_scaled.osim\". replace_force_set logical indicating whether replace force set. Default FALSE. force_set_file string specifying path force set file (e.g., \"reserve_actuators.xml\"). results_directory string specifying directory results saved. Default current directory (\"./\"). start_time numeric value indicating start time analysis. Default 0. end_time numeric value indicating end time analysis. Default 3. solve_for_equilibrium_for_auxiliary_states logical indicating whether solve equilibrium auxiliary states. Default TRUE. coordinates_file string specifying path coordinates file. Default NULL. controls_file string specifying path controls file. Default NULL. states_file string specifying path states file. Default NULL. in_degrees logical indicating whether use degrees coordinate values. Default TRUE. step_interval numeric value specifying step interval analysis. Default 1. setup_filename string specifying filename XML setup file. Default \"setup_ka.xml\". write_file logical indicating whether write analysis tool XML file. Default FALSE. return_object logical indicating whether return analysis tool object. Default TRUE.","code":""},{"path":"/reference/setup_kinematic_analysis_osim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup Kinematic Analysis for OpenSim — setup_kinematic_analysis_osim","text":"`return_object` TRUE, returns OpenSim `AnalyzeTool` object. neither `write_file` `return_object` TRUE, returns NULL invisibly.","code":""},{"path":"/reference/setup_kinematic_analysis_xml.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Up Kinematic Analysis XML for Simulation — setup_kinematic_analysis_xml","title":"Set Up Kinematic Analysis XML for Simulation — setup_kinematic_analysis_xml","text":"function modifies XML configuration file kinematic analysis. updates XML file various parameters model file, force set files, analysis times, integrator settings, configuration parameters. modified XML file saved specified setup filename.","code":""},{"path":"/reference/setup_kinematic_analysis_xml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Up Kinematic Analysis XML for Simulation — setup_kinematic_analysis_xml","text":"","code":"setup_kinematic_analysis_xml(   base_file = \"setup_ka_base.xml\",   model_file = \"model_scaled.osim\",   replace_force_set = \"false\",   force_set_files = \"reserve_actuators.xml\",   results_directory = \".\",   output_precision = \"12\",   start_time,   end_time,   solve_for_equilibrium_for_auxiliary_states = \"false\",   maximum_number_of_integrator_steps = \"20000\",   maximum_integrator_step_size = \"1\",   minimum_integrator_step_size = \"1e-05\",   integrator_error_tolerance = \"1e-05\",   step_interval = \"1\",   in_degrees = \"true\",   external_loads_file = \"external_loads.xml\",   coordinates_file = \"ik.mot\",   lowpass_cutoff_frequency_for_coordinates = \"12\",   setup_filename = \"setup_ka.xml\" )"},{"path":"/reference/setup_kinematic_analysis_xml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Up Kinematic Analysis XML for Simulation — setup_kinematic_analysis_xml","text":"base_file Character string. path base XML file modified (default \"setup_ka_base.xml\"). model_file Character string. path model file used (default \"model_scaled.osim\"). replace_force_set Character string. Whether replace force set (\"true\" \"false\", default \"false\"). force_set_files Character string. path force set files used (default \"reserve_actuators.xml\"). results_directory Character string. directory results saved (default current directory, \".\"). output_precision Character string. desired precision output (default \"12\"). start_time Numeric. start time analysis (seconds). end_time Numeric. end time analysis (seconds). solve_for_equilibrium_for_auxiliary_states Character string. Whether solve equilibrium auxiliary states (\"true\" \"false\", default \"false\"). maximum_number_of_integrator_steps Numeric. maximum number integrator steps (default 20000). maximum_integrator_step_size Numeric. maximum size integrator step (default 1). minimum_integrator_step_size Numeric. minimum size integrator step (default 1e-05). integrator_error_tolerance Numeric. error tolerance integrator (default 1e-05). step_interval Numeric. step interval kinematic analysis (default \"1\"). in_degrees Character string. Whether results expressed degrees (\"true\" \"false\", default \"true\"). external_loads_file Character string. path external loads file (default \"external_loads.xml\"). coordinates_file Character string. path coordinates file (default \"ik.mot\"). lowpass_cutoff_frequency_for_coordinates Numeric. cutoff frequency lowpass filtering coordinates (default \"12\"). setup_filename Character string. name XML file save modified configuration (default \"setup_ka.xml\").","code":""},{"path":"/reference/setup_kinematic_analysis_xml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Up Kinematic Analysis XML for Simulation — setup_kinematic_analysis_xml","text":"function return value. modifies XML file place saves provided `setup_filename`.","code":""},{"path":"/reference/setup_kinematic_analysis_xml.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set Up Kinematic Analysis XML for Simulation — setup_kinematic_analysis_xml","text":"function uses `XML` package parse modify XML configuration file. parameter function corresponds specific element XML, value updated accordingly. modified XML file saved specified location.","code":""},{"path":"/reference/setup_muscle_analysis_osim.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup Muscle Analysis for OpenSim — setup_muscle_analysis_osim","title":"Setup Muscle Analysis for OpenSim — setup_muscle_analysis_osim","text":"function configures sets muscle analysis OpenSim given model. analysis run using specified parameters, options save results, return analysis tool object use.","code":""},{"path":"/reference/setup_muscle_analysis_osim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup Muscle Analysis for OpenSim — setup_muscle_analysis_osim","text":"","code":"setup_muscle_analysis_osim(   model_file = \"model_scaled.osim\",   replace_force_set = FALSE,   force_set_file = \"reserve_actuators.xml\",   results_directory = \".\",   start_time = 0,   end_time = 3,   solve_for_equilibrium_for_auxiliary_states = TRUE,   coordinates_file = NULL,   controls_file = NULL,   states_file = NULL,   in_degrees = TRUE,   muscle_list = c(\"bflh_r\", \"bfsh_r\", \"semimem_r\", \"semiten_r\"),   moment_arm_coordinate_list = c(\"knee_angle_r\", \"hip_flexion_r\"),   compute_moments = TRUE,   step_interval = 1,   setup_filename = \"setup_ma.xml\",   write_file = FALSE,   return_object = TRUE )"},{"path":"/reference/setup_muscle_analysis_osim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup Muscle Analysis for OpenSim — setup_muscle_analysis_osim","text":"model_file string specifying path OpenSim model file. Default \"model_scaled.osim\". replace_force_set logical indicating whether replace force set. Default FALSE. force_set_file string specifying path force set file (e.g., \"reserve_actuators.xml\"). results_directory string specifying directory results saved. Default current directory (\"./\"). start_time numeric value indicating start time analysis. Default 0. end_time numeric value indicating end time analysis. Default 3. solve_for_equilibrium_for_auxiliary_states logical indicating whether solve equilibrium auxiliary states. Default TRUE. coordinates_file string specifying path coordinates file. Default NULL. controls_file string specifying path controls file. Default NULL. states_file string specifying path states file. Default NULL. in_degrees logical indicating whether use degrees coordinate values. Default TRUE. muscle_list character vector specifying list muscles include analysis. Default `c(\"bflh_r\", \"bfsh_r\", \"semimem_r\", \"semiten_r\")`. moment_arm_coordinate_list character vector specifying coordinates moment arm calculation. Default `c(\"knee_angle_r\", \"hip_flexion_r\")`. compute_moments logical indicating whether compute muscle moment arms. Default TRUE. step_interval numeric value specifying step interval analysis. Default 1. setup_filename string specifying filename XML setup file. Default \"setup_ma.xml\". write_file logical indicating whether write analysis tool XML file. Default FALSE. return_object logical indicating whether return analysis tool object. Default TRUE.","code":""},{"path":"/reference/setup_muscle_analysis_osim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup Muscle Analysis for OpenSim — setup_muscle_analysis_osim","text":"`return_object` TRUE, returns OpenSim `AnalyzeTool` object. neither `write_file` `return_object` TRUE, returns NULL invisibly.","code":""},{"path":"/reference/setup_muscle_analysis_xml.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Up Muscle Analysis XML for Simulation — setup_muscle_analysis_xml","title":"Set Up Muscle Analysis XML for Simulation — setup_muscle_analysis_xml","text":"function modifies XML configuration file muscle analysis updating various parameters related analysis setup. updates XML file information model file, force set files, results directory, analysis times, solver options. modified XML file saved specified setup filename.","code":""},{"path":"/reference/setup_muscle_analysis_xml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Up Muscle Analysis XML for Simulation — setup_muscle_analysis_xml","text":"","code":"setup_muscle_analysis_xml(   base_file = \"setup_ma_base.xml\",   model_file = \"model_scaled.osim\",   replace_force_set = \"false\",   force_set_files = \"reserve_actuators.xml\",   results_directory = \".\",   output_precision = \"12\",   start_time,   end_time,   solve_for_equilibrium_for_auxiliary_states = \"false\",   maximum_number_of_integrator_steps = \"20000\",   maximum_integrator_step_size = \"1\",   minimum_integrator_step_size = \"1e-05\",   integrator_error_tolerance = \"1e-05\",   step_interval = \"1\",   in_degrees = \"true\",   muscle_list = \"all\",   moment_arm_coordinate_list = \"all\",   compute_moments = \"true\",   external_loads_file = \"external_loads.xml\",   coordinates_file = \"ik.mot\",   lowpass_cutoff_frequency_for_coordinates = \"12\",   setup_filename = \"setup_ma.xml\" )"},{"path":"/reference/setup_muscle_analysis_xml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Up Muscle Analysis XML for Simulation — setup_muscle_analysis_xml","text":"base_file Character string. path base XML file modified (default \"setup_ma_base.xml\"). model_file Character string. path model file used (default \"model_scaled.osim\"). replace_force_set Character string. Whether replace force set (\"true\" \"false\", default \"false\"). force_set_files Character string. path force set files used (default \"reserve_actuators.xml\"). results_directory Character string. directory results saved (default current directory, \".\"). output_precision Character string. desired precision output (default \"12\"). start_time Numeric. start time analysis (seconds). end_time Numeric. end time analysis (seconds). solve_for_equilibrium_for_auxiliary_states Character string. Whether solve equilibrium auxiliary states (\"true\" \"false\", default \"false\"). maximum_number_of_integrator_steps Numeric. maximum number integrator steps (default 20000). maximum_integrator_step_size Numeric. maximum size integrator step (default 1). minimum_integrator_step_size Numeric. minimum size integrator step (default 1e-05). integrator_error_tolerance Numeric. error tolerance integrator (default 1e-05). step_interval Numeric. step interval muscle analysis (default \"1\"). in_degrees Character string. Whether results expressed degrees (\"true\" \"false\", default \"true\"). muscle_list Character string. list muscles include analysis (default \"\"). moment_arm_coordinate_list Character string. list coordinates moment arm calculations (default \"\"). compute_moments Character string. Whether compute muscle moments (\"true\" \"false\", default \"true\"). external_loads_file Character string. path external loads file (default \"external_loads.xml\"). coordinates_file Character string. path coordinates file (default \"ik.mot\"). lowpass_cutoff_frequency_for_coordinates Numeric. cutoff frequency lowpass filtering coordinates (default \"12\"). setup_filename Character string. name XML file save modified configuration (default \"setup_ma.xml\").","code":""},{"path":"/reference/setup_muscle_analysis_xml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Up Muscle Analysis XML for Simulation — setup_muscle_analysis_xml","text":"function return value. modifies XML file place saves provided `setup_filename`.","code":""},{"path":"/reference/setup_muscle_analysis_xml.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set Up Muscle Analysis XML for Simulation — setup_muscle_analysis_xml","text":"function uses `XML` package parse modify XML configuration file. parameter function corresponds specific element XML, value updated accordingly. modified XML file saved specified location.","code":""},{"path":"/reference/setup_scale_xml.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup Scale XML — setup_scale_xml","title":"Setup Scale XML — setup_scale_xml","text":"function sets XML file scaling model modifying given base XML file specified parameters (e.g., mass, height, age, etc.) saves updated XML file specified filename.","code":""},{"path":"/reference/setup_scale_xml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup Scale XML — setup_scale_xml","text":"","code":"setup_scale_xml(   base_file = \"setup_scale_base.xml\",   mass,   height,   age,   model_file = \"baseline_model.osim\",   marker_file = \"marker_data.trc\",   coordinate_file = \"Unassigned\",   start_time,   end_time,   output_motion_file = \"ik.mot\",   output_model_file = \"model_scaled.osim\",   output_marker_file = \"marker_locations.sto\",   setup_filename = \"setup_scale.xml\" )"},{"path":"/reference/setup_scale_xml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup Scale XML — setup_scale_xml","text":"base_file character string specifying path base XML file. Default \"setup_scale_base.xml\". mass numeric value specifying mass model. height numeric value specifying height model. age numeric value specifying age model. model_file character string specifying path baseline model file. Default \"baseline_model.osim\". marker_file character string specifying path marker data file. Default \"marker_data.trc\". coordinate_file character string specifying path coordinate file. Default \"Unassigned\". start_time numeric value specifying start time simulation. end_time numeric value specifying end time simulation. output_motion_file character string specifying output motion file name. Default \"ik.mot\". output_model_file character string specifying output model file name. Default \"model_scaled.osim\". output_marker_file character string specifying output marker file name. Default \"marker_locations.sto\". setup_filename character string specifying name output setup XML file. Default \"setup_scale.xml\".","code":""},{"path":"/reference/setup_scale_xml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup Scale XML — setup_scale_xml","text":"function return value. writes modified XML specified setup_filename.","code":""},{"path":"/reference/setup_static_optimisation_xml.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Up Static Optimization XML for Simulation — setup_static_optimisation_xml","title":"Set Up Static Optimization XML for Simulation — setup_static_optimisation_xml","text":"function modifies XML configuration file static optimization analysis. updates XML file various parameters model file, force set files, analysis times, integrator settings, muscle physiology, configuration parameters specific static optimization. modified XML file saved specified setup filename.","code":""},{"path":"/reference/setup_static_optimisation_xml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Up Static Optimization XML for Simulation — setup_static_optimisation_xml","text":"","code":"setup_static_optimisation_xml(   base_file = \"setup_so_base.xml\",   model_file = \"model_scaled.osim\",   replace_force_set = \"false\",   force_set_files = \"reserve_actuators.xml\",   results_directory = \".\",   output_precision = \"12\",   start_time,   end_time,   solve_for_equilibrium_for_auxiliary_states = \"false\",   maximum_number_of_integrator_steps = \"20000\",   maximum_integrator_step_size = \"1\",   minimum_integrator_step_size = \"1e-05\",   integrator_error_tolerance = \"1e-05\",   step_interval = \"1\",   use_model_force_set = \"true\",   activation_exponent = \"2\",   use_muscle_physiology = \"true\",   external_loads_file = \"external_loads.xml\",   coordinates_file = \"ik.mot\",   lowpass_cutoff_frequency_for_coordinates = \"12\",   setup_filename = \"setup_so.xml\" )"},{"path":"/reference/setup_static_optimisation_xml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Up Static Optimization XML for Simulation — setup_static_optimisation_xml","text":"base_file Character string. path base XML file modified (default \"setup_so_base.xml\"). model_file Character string. path model file used (default \"model_scaled.osim\"). replace_force_set Character string. Whether replace force set (\"true\" \"false\", default \"false\"). force_set_files Character string. path force set files used (default \"reserve_actuators.xml\"). results_directory Character string. directory results saved (default current directory, \".\"). output_precision Character string. desired precision output (default \"12\"). start_time Numeric. start time analysis (seconds). end_time Numeric. end time analysis (seconds). solve_for_equilibrium_for_auxiliary_states Character string. Whether solve equilibrium auxiliary states (\"true\" \"false\", default \"false\"). maximum_number_of_integrator_steps Numeric. maximum number integrator steps (default 20000). maximum_integrator_step_size Numeric. maximum size integrator step (default 1). minimum_integrator_step_size Numeric. minimum size integrator step (default 1e-05). integrator_error_tolerance Numeric. error tolerance integrator (default 1e-05). step_interval Numeric. step interval static optimization analysis (default \"1\"). use_model_force_set Character string. Whether use model's force set optimization (\"true\" \"false\", default \"true\"). activation_exponent Numeric. activation exponent used optimization (default \"2\"). use_muscle_physiology Character string. Whether use muscle physiology optimization (\"true\" \"false\", default \"true\"). external_loads_file Character string. path external loads file (default \"external_loads.xml\"). coordinates_file Character string. path coordinates file (default \"ik.mot\"). lowpass_cutoff_frequency_for_coordinates Numeric. cutoff frequency lowpass filtering coordinates (default \"12\"). setup_filename Character string. name XML file save modified configuration (default \"setup_so.xml\").","code":""},{"path":"/reference/setup_static_optimisation_xml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Up Static Optimization XML for Simulation — setup_static_optimisation_xml","text":"function return value. modifies XML file place saves provided `setup_filename`.","code":""},{"path":"/reference/setup_static_optimisation_xml.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set Up Static Optimization XML for Simulation — setup_static_optimisation_xml","text":"function uses `XML` package parse modify XML configuration file. parameter function corresponds specific element XML, value updated accordingly. modified XML file saved specified location.","code":""},{"path":"/reference/strength_scale_osim.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale Muscle Strength in OpenSim Model — strength_scale_osim","title":"Scale Muscle Strength in OpenSim Model — strength_scale_osim","text":"function scales muscle strength OpenSim model specified factor. can  save modified model file return updated model object.","code":""},{"path":"/reference/strength_scale_osim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale Muscle Strength in OpenSim Model — strength_scale_osim","text":"","code":"strength_scale_osim(   model_input_file = \"Baseline_model.osim\",   model_output_file = \"Baseline_model_stronger.osim\",   write_file = TRUE,   return_object = FALSE,   scaleFactor = 5 )"},{"path":"/reference/strength_scale_osim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale Muscle Strength in OpenSim Model — strength_scale_osim","text":"model_input_file string specifying path input OpenSim model file (default \"Baseline_model.osim\"). model_output_file string specifying path output updated OpenSim model file (default \"Baseline_model_stronger.osim\"). write_file logical value indicating whether write updated model file (default TRUE). return_object logical value indicating whether return updated model object (default FALSE). scaleFactor numeric value indicating scaling factor muscle strength (default 5).","code":""},{"path":"/reference/strength_scale_osim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale Muscle Strength in OpenSim Model — strength_scale_osim","text":"`return_object` TRUE, returns modified OpenSim model object; otherwise, NULL.","code":""},{"path":"/reference/strength_update_handsfield_osim.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Muscle Strength in OpenSim Model Using Handsfield Method — strength_update_handsfield_osim","title":"Update Muscle Strength in OpenSim Model Using Handsfield Method — strength_update_handsfield_osim","text":"function updates muscle strength scaled OpenSim model based reference model using  Handsfield scaling method. calculates new muscle properties can save modified model  file return updated model object.","code":""},{"path":"/reference/strength_update_handsfield_osim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Muscle Strength in OpenSim Model Using Handsfield Method — strength_update_handsfield_osim","text":"","code":"strength_update_handsfield_osim(   model_scaled_file = \"Baseline_scaled.osim\",   model_ref_file = \"Baseline_markers.osim\",   model_output_file = \"Model_updated.osim\",   write_file = TRUE,   return_object = FALSE,   scale_factor )"},{"path":"/reference/strength_update_handsfield_osim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Muscle Strength in OpenSim Model Using Handsfield Method — strength_update_handsfield_osim","text":"model_scaled_file string specifying path scaled OpenSim model file (default \"Baseline_scaled.osim\"). model_ref_file string specifying path reference OpenSim model file (default \"Baseline_markers.osim\"). model_output_file string specifying path output updated OpenSim model file (default \"Model_updated.osim\"). write_file logical value indicating whether write updated model file (default TRUE). return_object logical value indicating whether return updated model object (default FALSE). scale_factor numeric value indicating scaling factor muscle volume.","code":""},{"path":"/reference/strength_update_handsfield_osim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Muscle Strength in OpenSim Model Using Handsfield Method — strength_update_handsfield_osim","text":"`return_object` TRUE, returns modified OpenSim model object; otherwise, NULL.","code":""},{"path":"/reference/time_normalise.html","id":null,"dir":"Reference","previous_headings":"","what":"Time normalises continuous data — Time_normalise","title":"Time normalises continuous data — Time_normalise","text":"Takes dataframe containing continuous data resamples specified number points","code":""},{"path":"/reference/time_normalise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time normalises continuous data — Time_normalise","text":"","code":"Time_normalise()"},{"path":"/reference/time_normalise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time normalises continuous data — Time_normalise","text":"DF dataframe containing continuous data needs time normalised specified number points. first column data frame must time sample number column ascending order nodes numeric value indicates many points like data resampled ","code":""},{"path":"/reference/time_normalise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time normalises continuous data — Time_normalise","text":"dataframe nrow(nodes) contains resampled data","code":""},{"path":"/reference/update_max_contraction_velocity_osim.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Maximum Contraction Velocity in an OpenSim Model — update_max_contraction_velocity_osim","title":"Update Maximum Contraction Velocity in an OpenSim Model — update_max_contraction_velocity_osim","text":"function loads OpenSim model, modifies maximum contraction velocity muscles, optionally writes modified model file returns .","code":""},{"path":"/reference/update_max_contraction_velocity_osim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Maximum Contraction Velocity in an OpenSim Model — update_max_contraction_velocity_osim","text":"","code":"update_max_contraction_velocity_osim(   model_input_file = \"Baseline_model.osim\",   model_output_file = \"Baseline_model_stronger.osim\",   new_max = 20,   write_file = TRUE,   return_object = FALSE )"},{"path":"/reference/update_max_contraction_velocity_osim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Maximum Contraction Velocity in an OpenSim Model — update_max_contraction_velocity_osim","text":"model_input_file Path input `.osim` model file. Defaults `\"Baseline_model.osim\"`. model_output_file Path output `.osim` file. Defaults `\"Baseline_model_stronger.osim\"`. new_max Numeric value specifying new maximum contraction velocity muscles. Defaults `20`. write_file Logical; whether write modified model file. Defaults `TRUE`. return_object Logical; whether return modified model object. Defaults `FALSE`.","code":""},{"path":"/reference/update_max_contraction_velocity_osim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Maximum Contraction Velocity in an OpenSim Model — update_max_contraction_velocity_osim","text":"`return_object = TRUE`, returns modified OpenSim model object. Otherwise, returns `NULL` invisibly.","code":""},{"path":"/reference/update_muscle_colours_osim.html","id":null,"dir":"Reference","previous_headings":"","what":"Update OpenSim Muscle Colours — update_muscle_colours_osim","title":"Update OpenSim Muscle Colours — update_muscle_colours_osim","text":"function updates muscle colours OpenSim model based given inputs. reads OpenSim model, updates muscle colours, saves model new file.","code":""},{"path":"/reference/update_muscle_colours_osim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update OpenSim Muscle Colours — update_muscle_colours_osim","text":"","code":"update_muscle_colours_osim(   model_input_file = \"Baseline_markers.osim\",   model_output_file = \"Baseline_markers_coloured.osim\",   colours = c(\"#009E73\", \"#009E73\"),   muscles = c(\"bflh140_r\", \"bfsh140_r\") )"},{"path":"/reference/update_muscle_colours_osim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update OpenSim Muscle Colours — update_muscle_colours_osim","text":"model_input_file Path input OpenSim model (.osim file). model_output_file Path save updated OpenSim model. colours vector colour codes (hex format) muscles updated. muscles vector muscle names updated model.","code":""},{"path":"/reference/update_muscle_colours_osim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update OpenSim Muscle Colours — update_muscle_colours_osim","text":".osim file updated muscle colours.","code":""},{"path":"/reference/visualise_2D_marker_position.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize 2D Marker Data in Selected Plane — visualise_2D_marker_position","title":"Visualize 2D Marker Data in Selected Plane — visualise_2D_marker_position","text":"function visualizes marker data 2D plot (sagittal, frontal, transverse plane) selected frame. plots markers points chosen plane adjusts axis limits according marker data.","code":""},{"path":"/reference/visualise_2D_marker_position.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize 2D Marker Data in Selected Plane — visualise_2D_marker_position","text":"","code":"visualise_2D_marker_position(data, selected_frame, plane, point_size = 2)"},{"path":"/reference/visualise_2D_marker_position.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize 2D Marker Data in Selected Plane — visualise_2D_marker_position","text":"data data frame containing marker data (including columns X, Y, Z positions). selected_frame integer specifying frame number visualize. plane character string specifying plane plot. Options \"sagittal\", \"frontal\", \"transverse\". point_size numeric value specifying size points plot. Default 2.","code":""},{"path":"/reference/visualise_2D_marker_position.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize 2D Marker Data in Selected Plane — visualise_2D_marker_position","text":"ggplot2 object representing 2D visualization marker data.","code":""},{"path":"/reference/visualise_2D_segment_position.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize 2D Marker Data with Segments — visualise_2D_segment_position","title":"Visualize 2D Marker Data with Segments — visualise_2D_segment_position","text":"function visualizes marker data 2D plot (sagittal, frontal, transverse plane) draws lines markers belong segment. plot also supports adding legend segments.","code":""},{"path":"/reference/visualise_2D_segment_position.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize 2D Marker Data with Segments — visualise_2D_segment_position","text":"","code":"visualise_2D_segment_position(   data,   selected_frame,   mapping_data,   marker_col,   segment,   plane = \"sagittal\",   point_size = 2,   show_legend = TRUE )"},{"path":"/reference/visualise_2D_segment_position.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize 2D Marker Data with Segments — visualise_2D_segment_position","text":"data data frame containing marker data (including columns X, Y, Z positions). selected_frame integer specifying frame number visualize. mapping_data data frame maps marker segment. marker_col column `mapping_data` contains marker names. segment name column `mapping_data` indicates segment marker belongs. plane character string specifying plane plot. Options \"sagittal\", \"frontal\", \"transverse\". Default \"sagittal\". point_size numeric value specifying size points plot. Default 2. show_legend logical indicating whether show legend. Default TRUE.","code":""},{"path":"/reference/visualise_2D_segment_position.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize 2D Marker Data with Segments — visualise_2D_segment_position","text":"ggplot2 object representing 2D visualization marker data segments.","code":""},{"path":"/reference/visualise_3D_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a 3D Reference Frame to a Plotly Object — visualise_3D_frame","title":"Add a 3D Reference Frame to a Plotly Object — visualise_3D_frame","text":"Adds visual reference axes (X, Y, Z) existing 3D `plotly` object. axis drawn specified origin using direction vectors 3x3 reference frame matrix.","code":""},{"path":"/reference/visualise_3D_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a 3D Reference Frame to a Plotly Object — visualise_3D_frame","text":"","code":"visualise_3D_frame(p, reference_frame, origin, scale_factor = 100)"},{"path":"/reference/visualise_3D_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a 3D Reference Frame to a Plotly Object — visualise_3D_frame","text":"p `plotly` object (typically created `visualise_3D_marker_position()`). reference_frame 3x3 numeric matrix. column represents unit direction vector axis (X, Y, Z). origin numeric vector length 3 specifying origin point reference frame. scale_factor Numeric value indicating length axes draw (default 100).","code":""},{"path":"/reference/visualise_3D_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a 3D Reference Frame to a Plotly Object — visualise_3D_frame","text":"modified `plotly` object reference frame axes added.","code":""},{"path":"/reference/visualise_3D_marker_position.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize 3D Marker Position — visualise_3D_marker_position","title":"Visualize 3D Marker Position — visualise_3D_marker_position","text":"Visualizes 3D positions markers specific time point using interactive 3D plots.","code":""},{"path":"/reference/visualise_3D_marker_position.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize 3D Marker Position — visualise_3D_marker_position","text":"","code":"visualise_3D_marker_position(data, selected_frame)"},{"path":"/reference/visualise_3D_marker_position.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize 3D Marker Position — visualise_3D_marker_position","text":"data dataframe containing time marker positions columns formatted `Time`, `markername_X`, `markername_Y`, `markername_Z`. selected_frame Numeric value indicating frame visualize marker positions.","code":""},{"path":"/reference/visualise_3D_marker_position.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize 3D Marker Position — visualise_3D_marker_position","text":"`plotly` object representing 3D scatter plot marker positions.","code":""},{"path":"/reference/visualise_3D_segment_position.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize 3D Marker Positions and Segments — visualise_3D_segment_position","title":"Visualize 3D Marker Positions and Segments — visualise_3D_segment_position","text":"function visualizes 3D positions markers specific frame, connecting markers belonging body segment lines represent segments body 3D space.","code":""},{"path":"/reference/visualise_3D_segment_position.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize 3D Marker Positions and Segments — visualise_3D_segment_position","text":"","code":"visualise_3D_segment_position(   data,   selected_frame,   mapping_data,   marker_col,   segment )"},{"path":"/reference/visualise_3D_segment_position.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize 3D Marker Positions and Segments — visualise_3D_segment_position","text":"data data frame containing time marker positions columns formatted `Frame`, `Time`, `markername_X`, `markername_Y`, `markername_Z`. selected_frame Numeric value indicating frame visualize marker positions. mapping_data data frame containing mapping information, columns marker names associated body segments. marker_col Name column `mapping_data` contains marker names. segment Name column `mapping_data` contains body segments.","code":""},{"path":"/reference/visualise_3D_segment_position.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize 3D Marker Positions and Segments — visualise_3D_segment_position","text":"`plotly` object representing 3D scatter plot marker positions segment lines.","code":""},{"path":"/reference/visualize_3D_marker_frame_position.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize 3D Marker Frame Position — visualize_3D_marker_frame_position","title":"Visualize 3D Marker Frame Position — visualize_3D_marker_frame_position","text":"function visualizes 3D positions markers specified time point dataset. can also optionally display reference frame.","code":""},{"path":"/reference/visualize_3D_marker_frame_position.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize 3D Marker Frame Position — visualize_3D_marker_frame_position","text":"","code":"visualize_3D_marker_frame_position(   data,   selected_frame,   reference_frame,   origin )"},{"path":"/reference/visualize_3D_marker_frame_position.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize 3D Marker Frame Position — visualize_3D_marker_frame_position","text":"data data frame containing marker data, including columns '_X', '_Y', '_Z' suffixes marker positions. selected_frame numeric value representing time frame visualize markers. reference_frame 3x3 matrix representing reference frame (optional). column represent axis reference frame. origin 1x3 numeric vector representing origin point reference frame (optional).","code":""},{"path":"/reference/visualize_3D_marker_frame_position.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize 3D Marker Frame Position — visualize_3D_marker_frame_position","text":"Plotly 3D scatter plot visualizing marker positions selected time point, optional reference frame axes.","code":""},{"path":"/reference/write.trc.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a trc file — write.trc","title":"Write a trc file — write.trc","text":"Write trc file","code":""},{"path":"/reference/write.trc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a trc file — write.trc","text":"","code":"write.trc()"},{"path":"/reference/write.trc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a trc file — write.trc","text":"x dataframe containing data write trc. format produced read.trc() unit string contain unit measurement either \"mm\" \"m\" filename string identifying filename write file. Must end .trc","code":""},{"path":"/reference/write.trc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a trc file — write.trc","text":"trc file filename","code":""},{"path":"/reference/write_force_mot.html","id":null,"dir":"Reference","previous_headings":"","what":"Write GRF Data Frame to File — write_force_mot","title":"Write GRF Data Frame to File — write_force_mot","text":"function writes GRF (Ground Reaction Force) data frame file specific header format suitable use OpenSim.","code":""},{"path":"/reference/write_force_mot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write GRF Data Frame to File — write_force_mot","text":"","code":"write_force_mot(data, filename)"},{"path":"/reference/write_force_mot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write GRF Data Frame to File — write_force_mot","text":"data data frame containing GRF data. first column represent time. filename character string specifying name file data written. Include extension .mot compatability OpenSim.","code":""},{"path":"/reference/write_force_mot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write GRF Data Frame to File — write_force_mot","text":"","code":"# Create a sample GRF data frame df <- data.frame(time = 1:10, force = rnorm(10)) # Write the data frame to a file named \"grf_data.mot\" write_force_mot(df, \"grf_data.mot\") #> Warning: appending column names to file"},{"path":"/reference/write_mot_sto.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Data Frame to OpenSim MOT or STO File — write_mot_sto","title":"Write Data Frame to OpenSim MOT or STO File — write_mot_sto","text":"function writes data frame OpenSim MOT STO file specific header format.","code":""},{"path":"/reference/write_mot_sto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Data Frame to OpenSim MOT or STO File — write_mot_sto","text":"","code":"write_mot_sto(data, name = \"Coordinates\", inDegrees = \"no\", filename)"},{"path":"/reference/write_mot_sto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Data Frame to OpenSim MOT or STO File — write_mot_sto","text":"data data frame containing data written. column represents variable, first column represent time.. name character string specifying name file. Default \"Coordinates\". inDegrees character string specifying whether data degrees. Default \"\". Use \"yes\" degrees. filename character string specifying name file data written. Include extension .mot .sto compatability OpenSim.","code":""},{"path":"/reference/write_mot_sto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write Data Frame to OpenSim MOT or STO File — write_mot_sto","text":"","code":"# Create a sample data frame df <- data.frame(time = 1:10, value = sin(1:10)) # Write the data frame to a file named \"example.mot\" write_mot_sto(df, name = \"ExampleData\", inDegrees = \"no\", filename = \"example.mot\") #> Warning: appending column names to file"},{"path":"/reference/write_trc.html","id":null,"dir":"Reference","previous_headings":"","what":"Write TRC File from Data Frame — write_trc","title":"Write TRC File from Data Frame — write_trc","text":"function writes data frame TRC (marker trajectory) file format used motion capture data.","code":""},{"path":"/reference/write_trc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write TRC File from Data Frame — write_trc","text":"","code":"write_trc(data, unit = \"mm\", filename)"},{"path":"/reference/write_trc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write TRC File from Data Frame — write_trc","text":"data data frame containing marker data. first two columns frame number time, followed marker data X, Y, Z format. unit character string specifying unit measurement (e.g., \"mm\"). Default \"mm\". filename character string specifying path file written.","code":""},{"path":"/reference/write_trc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write TRC File from Data Frame — write_trc","text":"","code":"# Create a sample data frame with marker data df <- data.frame(Frame = 1:10, Time = seq(0, 1, length.out = 10),                   Marker1_X = rnorm(10), Marker1_Y = rnorm(10), Marker1_Z = rnorm(10),                  Marker2_X = rnorm(10), Marker2_Y = rnorm(10), Marker2_Z = rnorm(10)) # Write the data frame to a TRC file named \"example.trc\" write_trc(df, unit = \"mm\", filename = \"example.trc\") #> Warning: appending column names to file #> Warning: appending column names to file"}]
